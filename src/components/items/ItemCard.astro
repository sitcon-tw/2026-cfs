---
import { Plus, Check } from "@lucide/astro";
import { getItemDescription } from "../../utils/items-loader";
import Stone from "@assets/img/小石.svg";
import { marked } from "marked";

const { t, card, selectedCategory = "all" } = Astro.props;

// Get current description based on selected category
const currentDescription = getItemDescription(card, selectedCategory);

// Prepare description data for client-side updates with all variants
const descriptionData = JSON.stringify({
	all: card.global_description,
	talent_recruitment: card.talent_recruitment,
	brand_exposure: card.brand_exposure,
	product_promotion: card.product_promotion
});

// Prepare sub-items data for remaining calculation
const hasSubItems = card.sub && card.sub.length > 0;
const subItemsData = hasSubItems
	? JSON.stringify(
			card.sub.map((sub: any, index: number) => ({
				id: `${card.id}-sub-${index}`,
				remaining: sub.remaining || "0"
			}))
		)
	: "[]";

// Calculate total remaining for items with sub-items
const totalRemaining = hasSubItems
	? card.sub.reduce((sum: number, sub: any) => {
			const remaining = parseInt(sub.remaining, 10);
			return sum + (isNaN(remaining) ? 0 : remaining);
		}, 0)
	: parseInt(card.remaining, 10) || 0;
---

<div
	class={`card ${card.quantity === "打包專屬" ? "package-exclusive-item" : ""}`}
	data-card-id={card.id}
	data-descriptions={descriptionData}
	data-order={card.order}
	data-talent-recruitment-order={card.talent_recruitment_order}
	data-brand-exposure-order={card.brand_exposure_order}
	data-product-promotion-order={card.product_promotion_order}
	data-has-sub-items={hasSubItems ? "true" : "false"}
	data-sub-items={subItemsData}
>
	<div class="card-image">
		{
			card.image ? (
				<img src={`/2026/cfs/items/${card.image}`} alt={card.image_description || card.name} />
			) : (
				<div class="placeholder-image">
					<img src={Stone.src} alt="No Image" />
				</div>
			)
		}
		<div class="tag">
			{card.quantity === "獨家" && <div class="exclusive-tag">{t.exclusive}</div>}
			{card.quantity === "打包專屬" && <div class="package-exclusive-tag">{t.package_exclusive}</div>}
			{
				card.quantity !== "獨家" && card.quantity !== "打包專屬" && card.quantity !== "不限" && totalRemaining > 0 && (
					<div class="remaining-tag" data-initial-remaining={totalRemaining} data-unit={t.unit[card.unit] || card.unit}>
						{t.remaining} {totalRemaining} {t.unit[card.unit] || card.unit}
					</div>
				)
			}
			<div class="deadline-tag">{`${new Date(card.deadline).getMonth() + 1}/${new Date(card.deadline).getDate()}`} {t.deadline}</div>
		</div>
	</div>
	<div class="card-content">
		<div class="title-row">
			<h3>{card.name}</h3>
			<button type="button" class="add-button" data-item-id={card.id} data-item-title={card.name} data-item-image={card.image || ""} data-item-price={card.price || ""}>
				<span class="add-icon">
					<Plus />
				</span>
				<span class="added-icon">
					<Check />
				</span>
			</button>
		</div>
		<div class="description" set:html={marked.parse(currentDescription)} />
	</div>
</div>

<style>
	.card {
		position: relative;
		background-color: var(--white);
		border-radius: 0.75rem;
		overflow: hidden;
	}

	.card-image {
		position: relative;
		width: 100%;
		height: 10rem;
		overflow: hidden;
	}

	.card-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		background-color: var(--gray-container);
	}

	.tag {
		position: absolute;
		top: 1rem;
		left: 1rem;
		color: var(--black);
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		max-width: calc(100% - 2rem);
	}

	.exclusive-tag {
		background-color: #ff9999;
		padding: 0.1rem 0.7rem;
		border-radius: 20px;
		font-size: 0.9rem;
		font-weight: 500;
	}

	.package-exclusive-tag {
		background-color: #9999ff;
		padding: 0.1rem 0.7rem;
		border-radius: 20px;
		font-size: 0.9rem;
		font-weight: 500;
	}

	.remaining-tag {
		background-color: var(--items-remaining-tag);
		padding: 0.1rem 0.7rem;
		border-radius: 20px;
		font-size: 0.9rem;
		font-weight: 500;
	}

	.deadline-tag {
		background-color: var(--items-deadline-tag);
		padding: 0.1rem 0.7rem;
		border-radius: 20px;
		font-size: 0.9rem;
		font-weight: 500;
	}

	.card-content {
		padding: 1.5rem;
	}

	.title-row {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.card-content h3 {
		color: var(--black);
		font-size: 1.1rem;
		margin: 0;
		font-weight: 600;
	}

	.add-button {
		width: 2rem;
		aspect-ratio: 1 / 1;
		border-radius: 50%;
		background-color: var(--black);
		color: var(--white);
		border: none;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: transform 0.2s ease;
	}

	.add-button svg {
		width: 20px;
		height: 20px;
	}

	.add-icon,
	.added-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		line-height: 1;
	}

	.add-button .added-icon {
		display: none;
	}
	.add-button.added .added-icon {
		display: flex;
	}
	.add-button.added .add-icon {
		display: none;
	}

	.add-button:hover {
		transform: scale(1.1);
	}

	.add-button.added {
		background-color: var(--items-progress);
	}

	.add-button.added:hover {
		background-color: var(--items-progress);
	}

	.description {
		color: var(--black);
		font-size: 0.9rem;
		line-height: 1.4;
		margin-bottom: 1rem;
		opacity: 0.8;
		display: -webkit-box;
		-webkit-line-clamp: 4;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.description :global(strong) {
		font-weight: normal;
	}

	.placeholder-image {
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: var(--gray-container);
		color: var(--gray);
		font-size: 0.9rem;
	}

	.placeholder-image img {
		width: 3rem;
		height: unset;
	}
</style>
