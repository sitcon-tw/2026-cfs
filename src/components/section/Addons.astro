---
const { t } = Astro.props;
import { Plus, Check } from "@lucide/astro";
import { loadItemsData, type ItemData } from "../../utils/items-loader";

const lang = Astro.currentLocale || "zh-Hant";
const itemsData = await loadItemsData(lang);

// Define types
interface GroupedItems {
	[key: string]: ItemData[];
}

// Group items by type field, excluding items with quantity "打包專屬"
const groupedItems: GroupedItems = {};
itemsData.forEach((item: ItemData) => {
	// Skip items with quantity "打包專屬"
	if (item.quantity === "打包專屬") {
		return;
	}

	const displayCategory = item.type || "其他";
	if (!groupedItems[displayCategory]) {
		groupedItems[displayCategory] = [];
	}
	groupedItems[displayCategory].push(item);
});

const categories = Object.keys(groupedItems);
---

<section id="addons">
	<h2>{t.title}</h2>
	<p class="subtitle">{t.subtitle}</p>
	<div class="container">
		<div class="addons-grid">
			{
				categories.map((category: string) => (
					<div class="category-section">
						<h3 class="category-title">{category}</h3>
						<div class="items-grid">
							{groupedItems[category].map((item: ItemData) => (
								<div class="addon-card" data-item-id={item.id}>
									<button type="button" class="add-button" data-item-id={item.id} data-item-name={item.name}>
										<span class="add-icon">
											<Plus />
										</span>
										<span class="added-icon">
											<Check />
										</span>
									</button>
									<div class="card-content">
										<div class="card-title">{item.name}</div>
									</div>
								</div>
							))}
						</div>
					</div>
				))
			}
		</div>
	</div>
</section>

<script>
	import { isItemInterested, addInterestedItem, removeInterestedItem } from "../../utils/local-storage.ts";

	declare function popupCtrl(id: string, action: string): void;

	function updateAddButtons() {
		const addButtons = document.querySelectorAll(".addon-card .add-button") as NodeListOf<HTMLButtonElement>;
		addButtons.forEach(button => {
			const itemId = button.getAttribute("data-item-id");
			if (itemId) {
				if (isItemInterested(itemId)) {
					button.classList.add("added");
				} else {
					button.classList.remove("added");
				}
			}
		});
	}

	function addCardClickHandlers() {
		const addonCards = document.querySelectorAll(".addon-card") as NodeListOf<HTMLElement>;
		addonCards.forEach(card => {
			const itemIdStr = card.getAttribute("data-item-id");
			if (itemIdStr) {
				card.style.cursor = "pointer";
				card.addEventListener("click", function (e) {
					// Check if click was on the add button or its children
					const target = e.target as HTMLElement;
					if (target.closest(".add-button")) {
						return; // Let the button handle its own click
					}
					e.stopPropagation();
					const popupId = `item-popup-${itemIdStr}`;
					popupCtrl(popupId, "open");
				});
			}
		});
	}

	function addButtonClickHandlers() {
		const addButtons = document.querySelectorAll(".addon-card .add-button") as NodeListOf<HTMLButtonElement>;
		addButtons.forEach(button => {
			button.addEventListener("click", function (e) {
				e.stopPropagation();
				const itemId = this.getAttribute("data-item-id");
				const itemName = this.getAttribute("data-item-name");

				if (itemId && itemName) {
					if (isItemInterested(itemId)) {
						removeInterestedItem(itemId);
					} else {
						addInterestedItem({
							id: itemId,
							title: itemName,
							category: "addon",
							image: "",
							deadline: "",
							quantity: 1,
							maxQuantity: null
						});
					}
					updateAddButtons();
				}
			});
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		updateAddButtons();
		addCardClickHandlers();
		addButtonClickHandlers();
	});

	window.addEventListener("itemsChange", updateAddButtons);

	document.addEventListener("interested-items-changed", updateAddButtons);
</script>

<style>
	section {
		background-color: var(--items-bg);
		padding: 5rem 0;
	}

	.container {
		max-width: 100rem;
		border-radius: 2rem;
		background-color: var(--white);
		width: calc(100% - 4rem);
		margin: 0 auto;
		padding: 5rem;
	}

	.subtitle {
		font-size: 1.2rem;
		color: var(--gray);
		text-align: center;
		margin-bottom: 3rem;
	}

	.addons-grid {
		max-width: 1200px;
		width: 100%;
		margin: 0 auto;
	}

	.category-section {
		margin-bottom: 4rem;
	}

	.category-title {
		font-size: 1.8rem;
		font-weight: 700;
		color: var(--black);
		margin-bottom: 2rem;
		text-align: left;
	}

	.items-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1.5rem;
	}

	.addon-card {
		background-color: var(--container);
		border-radius: 1rem;
		padding: 0.8rem;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 1rem;
		transition: all 0.2s ease;
	}

	.card-content {
	}

	.card-title {
		font-size: 1rem;
		font-weight: 500;
		line-height: 1.3;
	}

	.add-button {
		width: 2rem;
		aspect-ratio: 1 / 1;
		border-radius: 50%;
		background-color: var(--black);
		color: var(--white);
		border: none;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: transform 0.2s ease;
		flex-shrink: 0;
	}

	.add-button svg {
		width: 20px;
		height: 20px;
	}

	.add-icon,
	.added-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		line-height: 1;
	}

	.add-button .added-icon {
		display: none;
	}

	.add-button.added .added-icon {
		display: flex;
	}

	.add-button.added .add-icon {
		display: none;
	}

	.add-button:hover {
		transform: scale(1.1);
	}

	.add-button.added {
		background-color: var(--items-progress);
	}

	.add-button.added:hover {
		background-color: var(--items-progress);
	}

	@media screen and (max-width: 1024px) {
		.container {
			padding: 3rem 2rem;
		}

		.items-grid {
			grid-template-columns: repeat(auto-fill, minmax(220px, 220px));
			gap: 1rem;
			justify-content: flex-start;
		}

		.category-title {
			font-size: 1.5rem;
		}
	}

	@media screen and (max-width: 768px) {
		.container {
			padding: 2rem 1rem;
		}

		.category-title {
			font-size: 1.3rem;
		}

		.items-grid {
			grid-template-columns: 1fr;
			justify-content: flex-start;
		}

		.addon-card {
			padding: 0.8rem;
		}
	}

	@media screen and (max-width: 480px) {
		section {
			padding: 3rem 0;
		}

		.category-title {
			font-size: 1.2rem;
		}

		.addon-card {
			padding: 0.8rem;
		}

		.card-title {
			font-size: 0.9rem;
		}
	}

	@media print {
		section {
			padding: 1rem 0;
		}

		.container{
			padding: 2rem 2rem;
			margin: 16pt auto;
		}

		.category-title{
			font-size: 16pt;
			margin-bottom: 10pt;
		}

		.subtitle{
			display: none;
		}

		.items-grid{
			grid-template-columns: repeat(3, 1fr);
			gap: 8pt;
			justify-content: flex-start;
			margin-bottom: 16pt;
		}

		.card-title{
			font-size: 12pt;
			text-align: center;
			text-wrap: balance;
		}

		.addon-card{
			padding: 7pt;
		}

		.add-button{
			display: none;
		}

		.category-section{
			margin-bottom: 16pt;
		}
	}
</style>
