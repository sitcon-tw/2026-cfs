---
const { t } = Astro.props;
import { Flag } from "@lucide/astro";
import itemsData from "../../data/items_data.json";

// Define types
interface Item {
	id: number;
	category: string;
	title: string;
	image: string;
	deadline: string;
}

interface GroupedItems {
	[key: string]: Item[];
}

// Group items by category
const groupedItems: GroupedItems = {};
itemsData.forEach((item: Item) => {
	const displayCategory = t.item_categories[item.category] || item.category;
	if (!groupedItems[displayCategory]) {
		groupedItems[displayCategory] = [];
	}
	groupedItems[displayCategory].push(item);
});

const categories = Object.keys(groupedItems);
---

<section id="addons">
	<h2>{t.title}</h2>
	<p class="subtitle">{t.subtitle}</p>
	<div class="container">
		<div class="addons-grid">
			{
				categories.map((category: string, categoryIndex: number) => (
					<div class="category-section">
						<h3 class="category-title">{category}</h3>
						<div class="items-grid">
							{groupedItems[category].map((item: Item, index: number) => (
								<div class={`addon-card ${index === 2 && categoryIndex === 0 ? "highlighted" : ""}`}>
									<div class="card-icon">
										<Flag />
									</div>
									<div class="card-content">
										<div class="card-title">{t.item_titles[item.title]}</div>
									</div>
								</div>
							))}
						</div>
					</div>
				))
			}
		</div>
	</div>
</section>

<style>
	section {
		background-color: var(--items-bg);
		padding: 5rem 0;
	}

	.container {
		max-width: 100rem;
		border-radius: 2rem;
		background-color: var(--white);
		width: calc(100% - 4rem);
		margin: 0 auto;
		padding: 5rem;
		flex: auto;
		display: flex;
		justify-content: center;
	}

	h2 {
		font-size: 3rem;
		color: var(--black);
		text-align: center;
		margin-bottom: 1rem;
		font-weight: 700;
	}

	.subtitle {
		font-size: 1.2rem;
		color: var(--gray);
		text-align: center;
		margin-bottom: 3rem;
	}

	.addons-grid {
		max-width: 1200px;
		width: 100%;
	}

	.category-section {
		margin-bottom: 4rem;
	}

	.category-title {
		font-size: 1.8rem;
		font-weight: 700;
		color: var(--black);
		margin-bottom: 2rem;
		text-align: left;
	}

	.items-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1.5rem;
	}

	.addon-card {
		background-color: #f5f5f5;
		border-radius: 1rem;
		padding: 1.5rem;
		display: flex;
		align-items: center;
    justify-content: center;
		gap: 1rem;
		transition: all 0.2s ease;
		cursor: pointer;
	}

	.addon-card.highlighted {
		background-color: #6fd195;
		color: white;
	}

	.addon-card:hover {
    scale: 1.02;
  }

	.card-icon {
		font-size: 1.5rem;
		min-width: 24px;
	}

	.card-content {
		flex: 1;
	}

	.card-title {
		font-size: 1rem;
		font-weight: 500;
		line-height: 1.3;
	}

	.addon-card.highlighted .card-title {
		color: white;
	}

	@media (max-width: 1024px) {
		.container {
			padding: 3rem 2rem;
		}

		.items-grid {
			grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			gap: 1rem;
		}

		h2 {
			font-size: 2.5rem;
		}

		.category-title {
			font-size: 1.5rem;
		}
	}

	@media (max-width: 768px) {
		.container {
			padding: 2rem 1rem;
		}

		h2 {
			font-size: 2rem;
		}

		.category-title {
			font-size: 1.3rem;
		}

		.items-grid {
			grid-template-columns: 1fr;
		}

		.addon-card {
			padding: 1rem;
		}
	}

	@media (max-width: 480px) {
		section {
			padding: 3rem 0;
		}

		h2 {
			font-size: 1.8rem;
		}

		.category-title {
			font-size: 1.2rem;
		}

		.addon-card {
			padding: 0.75rem;
		}

		.card-title {
			font-size: 0.9rem;
		}
	}
</style>
