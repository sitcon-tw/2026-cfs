---
import { X, Heart } from "@lucide/astro";
import itemsData from "../../data/items_data.json";
import shopConfig from "../../data/shop_config.json";
import ItemCard from "@components/items/ItemCard.astro";

const { t } = Astro.props;
const items = itemsData;
const config = shopConfig;
---

<section id="items">
	<div class="container">
		<h2>{t.title}</h2>
		<p class="subtitle">{t.subtitle}</p>

		<div class="tabs">
			{
				config.categories.map((category: string, index: number) => (
					<button class={`tab ${index === 0 ? "active" : ""}`} data-category={category}>
						{t.item_categories[category]}
					</button>
				))
			}
		</div>

		<div class="cards-container fade-active">
			<div class="cards-grid">
				{items.map(card => <ItemCard t={t} card={card} shopConfig={config} />)}
			</div>
			<div class="fade-overlay"></div>
		</div>

		<button class="expand-button" id="expandButton">
			<span class="show-text">{t.expandAll}</span>
			<span class="hide-text" style="display: none;">{t.showLess}</span>
			<span class="arrow">▼</span>
		</button>

		<!-- Interest Items Modal Trigger Button -->
		<button class="interest-button" id="interestButton">
			<span class="heart-icon"><Heart /></span>
			<span class="interest-count">0</span>
		</button>

		<!-- Interest Items Popover -->
		<div class="interest-popover" id="interestPopover">
			<div class="popover-header">
				<h3>感興趣的項目</h3>
			</div>
			<div class="popover-content">
				<div class="interest-items-list" id="interestItemsList">
					<!-- Items will be populated here -->
				</div>
			</div>
		</div>

		<!-- Hidden template for remove button icon -->
		<template id="removeIconTemplate">
			<X />
		</template>
	</div>
</section>

<script>
	// Import local storage utilities
	import { getInterestedItems, addInterestedItem, removeInterestedItem, isItemInterested } from "../../utils/local-storage.ts";

	document.addEventListener("DOMContentLoaded", function () {
		const expandButton = document.getElementById("expandButton");
		const cardsContainer = document.querySelector(".cards-container");
		const showText = expandButton ? expandButton.querySelector(".show-text") : null;
		const hideText = expandButton ? expandButton.querySelector(".hide-text") : null;
		const arrow = expandButton ? expandButton.querySelector(".arrow") : null;

		if (!expandButton || !cardsContainer || !showText || !hideText || !arrow) return;

		// Single source of truth for expanded/collapsed state
		let isExpanded = false; // false = collapsed (fade-active), true = expanded (fade-hidden)
		// Whether the list can be expanded (i.e., enough items to warrant a toggle)
		let canExpand = true;

		function applyExpandState() {
			// If expanding isn't applicable, force expanded UI but don't modify isExpanded
			const shouldShowExpandedUI = !canExpand || isExpanded;

			if (shouldShowExpandedUI) {
				cardsContainer!.classList.remove("fade-active");
				cardsContainer!.classList.add("fade-hidden");
				(showText as HTMLElement).style.display = "none";
				(hideText as HTMLElement).style.display = "inline";
				(arrow as HTMLElement).style.transform = "rotate(180deg)";
			} else {
				cardsContainer!.classList.remove("fade-hidden");
				cardsContainer!.classList.add("fade-active");
				(showText as HTMLElement).style.display = "inline";
				(hideText as HTMLElement).style.display = "none";
				(arrow as HTMLElement).style.transform = "rotate(0deg)";
			}
		}

		expandButton.addEventListener("click", function () {
			isExpanded = !isExpanded;
			applyExpandState();
		});

		// Countdown/progress now handled within each ItemCard component

		// Category filtering functionality
		function filterCards(selectedCategory: string) {
			const cards = document.querySelectorAll(".card");
			let visibleCount = 0;

			cards.forEach(card => {
				const cardElement = card as HTMLElement;
				const cardCategory = cardElement.getAttribute("data-category");

				if (selectedCategory === "all" || cardCategory === selectedCategory) {
					cardElement.style.display = "block";
					visibleCount++;
				} else {
					cardElement.style.display = "none";
				}
			});

			// Show/hide expand button based on visible cards count
			updateExpandButtonVisibility(visibleCount);
		}

		function getCardsPerRowThreshold() {
			const width = window.innerWidth;
			if (width <= 768) {
				// Mobile: 1 column, show expand if more than 2 cards
				return 2;
			} else if (width <= 1024) {
				// Tablet: 2 columns, show expand if more than 4 cards
				return 4;
			} else {
				return 6;
			}
		}

		function updateExpandButtonVisibility(visibleCount: number) {
			const expandButton = document.getElementById("expandButton");
			if (!expandButton) return;

			const threshold = getCardsPerRowThreshold();

			if (visibleCount > threshold) {
				canExpand = true;
				expandButton.style.display = "flex";
				// Respect current user preference
				applyExpandState();
			} else {
				canExpand = false;
				expandButton.style.display = "none";
				// Force expanded UI without changing user preference
				applyExpandState();
			}
		}

		// Add event listeners to tab buttons
		const tabButtons = document.querySelectorAll(".tab");
		tabButtons.forEach(button => {
			button.addEventListener("click", function () {
				const buttonElement = button as HTMLElement;

				// Remove active class from all tabs
				tabButtons.forEach(tab => tab.classList.remove("active"));

				// Add active class to clicked tab
				buttonElement.classList.add("active");

				// Get category from data attribute
				const category = buttonElement.getAttribute("data-category") || "all";

				// Filter cards
				filterCards(category);
			});
		});

		// Initialize expand button visibility on page load
		const totalCards = document.querySelectorAll(".card").length;
		updateExpandButtonVisibility(totalCards);
		// Ensure initial UI matches the single source of truth
		applyExpandState();

		// Add resize event listener to update expand button on screen size change
		window.addEventListener("resize", function () {
			// Get current visible cards count
			const visibleCards = document.querySelectorAll('.card[style*="display: block"], .card:not([style*="display: none"])');
			updateExpandButtonVisibility(visibleCards.length);
		});

		// Interest Items functionality

		// Sync all add buttons' visual state with storage
		function syncAllAddButtons() {
			const items = getInterestedItems();
			const ids = new Set(items.map(i => i.id));
			document.querySelectorAll(".add-button").forEach(btn => {
				const id = Number(btn.getAttribute("data-item-id") || "0");
				if (ids.has(id)) btn.classList.add("added");
				else btn.classList.remove("added");
			});
		}

		// Delegate clicks for add/remove on item cards
		document.addEventListener("click", function (e) {
			const target = e.target;
			if (!(target instanceof Element)) return;
			const button = target.closest(".add-button");
			if (!button) return;
			e.preventDefault();
			e.stopPropagation();
			const id = Number(button.getAttribute("data-item-id") || "0");
			const title = button.getAttribute("data-item-title") || "";
			const category = button.getAttribute("data-item-category") || "";
			const image = button.getAttribute("data-item-image") || "";
			const deadline = button.getAttribute("data-item-deadline") || "";
			if (isItemInterested(id)) {
				removeInterestedItem(id);
				button.classList.remove("added");
			} else {
				addInterestedItem({ id, title, category, image, deadline });
				button.classList.add("added");
			}
		});
		function updateInterestButton() {
			const items = getInterestedItems();
			const countElement = document.querySelector(".interest-count");

			if (countElement) {
				if (items.length > 0) {
					countElement.textContent = items.length.toString();
				} else {
					countElement.textContent = "";
				}
			}
		}

		// Add-button state is centralized here (delegated clicks + sync)

		function renderInterestItemsList() {
			const items = getInterestedItems();
			const listContainer = document.getElementById("interestItemsList");

			if (!listContainer) return;

			if (items.length === 0) {
				listContainer.innerHTML = '<div class="empty-state">尚未收藏任何項目</div>';
				return;
			}

			// Clear the container first
			listContainer.innerHTML = "";

			// Get the remove icon template
			const removeIconTemplate = document.getElementById("removeIconTemplate") as HTMLTemplateElement | null;

			items.forEach(item => {
				const itemDiv = document.createElement("div");
				itemDiv.className = "interest-item";
				itemDiv.setAttribute("data-item-id", item.id.toString());

				const contentDiv = document.createElement("div");
				contentDiv.className = "item-content";

				const titleSpan = document.createElement("span");
				titleSpan.className = "item-title";
				titleSpan.textContent = item.title;

				const removeButton = document.createElement("button");
				removeButton.className = "remove-item";
				removeButton.setAttribute("data-item-id", item.id.toString());

				// Clone the icon from template
				if (removeIconTemplate) {
					const iconClone = removeIconTemplate.content.cloneNode(true);
					removeButton.appendChild(iconClone);
				}

				contentDiv.appendChild(titleSpan);
				contentDiv.appendChild(removeButton);
				itemDiv.appendChild(contentDiv);
				listContainer.appendChild(itemDiv);
			});

			// Add event listeners to remove buttons
			const removeButtons = listContainer.querySelectorAll(".remove-item");
			removeButtons.forEach(button => {
				button.addEventListener("click", function () {
					const itemId = parseInt(button.getAttribute("data-item-id") || "0");
					removeInterestedItem(itemId);
					// itemsChange event from utils/items.ts will trigger listeners
				});
			});
		}

		// Listen to centralized itemsChange events to update UI
		window.addEventListener("itemsChange", function (e: Event) {
			updateInterestButton();
			renderInterestItemsList();
			// Open the popover if the interest list grew
			try {
				const ce = e as CustomEvent;
				const detail = ce && ce.detail ? ce.detail : null;
				if (detail?.key === "interestItems") {
					const oldLen = detail.oldValue ? JSON.parse(detail.oldValue).length : 0;
					const newLen = detail.newValue ? JSON.parse(detail.newValue).length : 0;
					if (newLen > oldLen) {
						setTimeout(() => openPopover(), 0);
					}
				}
			} catch {}
		});

		// Popover functionality
		const interestButton = document.getElementById("interestButton");
		const interestPopover = document.getElementById("interestPopover");

		function positionPopover() {
			if (!interestButton || !interestPopover) return;

			const buttonRect = interestButton.getBoundingClientRect();
			const popoverRect = interestPopover.getBoundingClientRect();
			const viewportHeight = window.innerHeight;

			// Reset position
			interestPopover.style.position = "fixed";

			// Align right edges - popover's right edge aligns with button's right edge
			let left = buttonRect.right - 300; // 300px is popover width
			let top = buttonRect.top - popoverRect.height - 12; // 12px gap above button

			// Adjust horizontal position if it goes off screen on the left
			if (left < 16) {
				left = 16;
			}

			// Check if there's enough space above
			if (top < 16) {
				// Not enough space above, position below
				top = buttonRect.bottom + 12;
			}

			// Final check - if still off screen vertically, position within viewport
			if (top + popoverRect.height > viewportHeight - 16) {
				top = viewportHeight - popoverRect.height - 16;
			}

			interestPopover.style.left = `${left}px`;
			interestPopover.style.top = `${top}px`;
		}

		function openPopover() {
			if (interestPopover) {
				renderInterestItemsList();
				interestPopover.classList.add("active");
				positionPopover();
			}
		}

		function closePopover() {
			if (interestPopover) {
				interestPopover.classList.remove("active");
			}
		}

		if (interestButton) {
			interestButton.addEventListener("click", function (e) {
				e.stopPropagation();
				if (interestPopover?.classList.contains("active")) {
					closePopover();
				} else {
					openPopover();
				}
			});
		}

		// Close popover when clicking outside
		document.addEventListener("click", function (e) {
			if (interestPopover?.classList.contains("active") && !interestPopover.contains(e.target as Node) && !interestButton?.contains(e.target as Node)) {
				closePopover();
			}
		});

		// Close popover with ESC key
		document.addEventListener("keydown", function (e) {
			if (e.key === "Escape") {
				closePopover();
			}
		});

		// Reposition on window resize
		window.addEventListener("resize", function () {
			if (interestPopover?.classList.contains("active")) {
				positionPopover();
			}
		});

		// Initialize
		updateInterestButton();
		syncAllAddButtons();

		// Interest button visibility management
		const targetSections = ["items", "plans", "addons", "form"];
		let currentSection = "";

		function updateInterestButtonVisibility() {
			const interestButtons = document.querySelectorAll(".interest-button");

			// Check which section is currently in view
			let foundSection = "";

			for (const sectionName of targetSections) {
				const section = document.getElementById(sectionName);
				if (section) {
					const rect = section.getBoundingClientRect();
					const sectionHeight = rect.height;
					const visibleHeight = Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);

					// Consider section active if more than 30% is visible
					if (visibleHeight > sectionHeight * 0.3) {
						foundSection = sectionName;
						break;
					}
				}
			}

			// Only update if section changed
			if (foundSection !== currentSection) {
				currentSection = foundSection;

				interestButtons.forEach(button => {
					const buttonElement = button as HTMLElement;
					if (foundSection) {
						buttonElement.style.display = "flex";
					} else {
						buttonElement.style.display = "none";
					}
				});
			}
		}

		// Throttled scroll handler for performance
		let scrollTimeout: number | undefined;
		function handleScroll() {
			if (scrollTimeout) {
				cancelAnimationFrame(scrollTimeout);
			}
			scrollTimeout = requestAnimationFrame(updateInterestButtonVisibility);
		}

		document.addEventListener("scroll", handleScroll);
		window.addEventListener("resize", updateInterestButtonVisibility);

		// Initial check
		setTimeout(updateInterestButtonVisibility, 100);
		// Keep add buttons in sync when items change elsewhere
		window.addEventListener("itemsChange", syncAllAddButtons);
	});
</script>

<style>
	section {
		background-color: var(--items-bg);
		padding: 4rem 0;
		min-height: 100vh;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 2rem;
	}

	h2 {
		font-size: 3rem;
		color: var(--black);
		text-align: center;
		margin-bottom: 1rem;
		font-weight: bold;
	}

	.subtitle {
		color: var(--black);
		text-align: center;
		margin-bottom: 3rem;
		font-size: 1.1rem;
	}

	.tabs {
		display: flex;
		justify-content: center;
		gap: 0;
		margin-bottom: 3rem;
	}

	.tab {
		padding: 0.75rem 1.5rem;
		border: none;
		background-color: var(--white);
		color: var(--black);
		cursor: pointer;
		border-radius: 25px;
		margin: 0 0.25rem;
		font-size: 1rem;
		transition: background-color 0.3s ease;
	}

	.tab.active {
		background-color: var(--gray-container);
	}

	.tab:hover {
		background-color: var(--gray-container);
	}

	.cards-container {
		position: relative;
		margin-bottom: 3rem;
		transition: all 0.3s ease;
	}

	.cards-container.fade-active {
		max-height: 800px;
		overflow: hidden;
	}

	.cards-container.fade-hidden {
		max-height: none;
		overflow: visible;
	}

	.fade-overlay {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 150px;
		background: linear-gradient(transparent, var(--items-bg));
		pointer-events: none;
		transition: opacity 0.3s ease;
		z-index: 1;
	}

	.cards-container.fade-hidden .fade-overlay {
		opacity: 0;
		visibility: hidden;
	}

	.cards-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 2rem;
	}

	.expand-button {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		margin: 0 auto;
		padding: 1rem 2rem;
		background: none;
		border: none;
		color: #007aff;
		font-size: 1rem;
		font-family: inherit;
		font-weight: 700;
		cursor: pointer;
		position: relative;
		z-index: 2;
	}

	.expand-button:hover {
		color: #0056cc;
	}

	.expand-button .arrow {
		transition: transform 0.3s ease;
		font-size: 0.8rem;
	}

	/* Interest Button Styles */
	.interest-button {
		position: fixed;
		bottom: 2rem;
		right: 2rem;
		width: 56px;
		height: 56px;
		border-radius: 50%;
		background-color: var(--white);
		border: none;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
		transition: all 0.2s ease;
		z-index: 1000;
	}

	.interest-button:hover {
		transform: scale(1.05);
		box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
	}

	.interest-button .heart-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--black);
		transition: all 0.2s ease;
	}

	.interest-button .heart-icon svg {
		width: 20px;
		height: 20px;
		stroke-width: 2;
	}

	.interest-button .interest-count {
		position: absolute;
		top: -4px;
		right: -4px;
		background-color: var(--black);
		color: var(--white);
		font-size: 0.75rem;
		font-weight: 600;
		min-width: 18px;
		height: 18px;
		border-radius: 9px;
		display: flex;
		align-items: center;
		justify-content: center;
		line-height: 1;
		opacity: 0;
		transform: scale(0.5);
		transition: all 0.2s ease;
	}

	.interest-button .interest-count:not(:empty) {
		opacity: 1;
		transform: scale(1);
	}

	/* Popover Styles */
	.interest-popover {
		position: fixed;
		width: 320px;
		max-height: 400px;
		background-color: var(--white);
		border-radius: 16px;
		box-shadow:
			0 8px 32px rgba(0, 0, 0, 0.12),
			0 4px 16px rgba(0, 0, 0, 0.08);
		z-index: 2000;
		visibility: hidden;
		opacity: 0;
		transform: scale(0.95) translateY(-4px);
		transition: all 0.2s cubic-bezier(0.16, 1, 0.3, 1);
	}

	.interest-popover.active {
		visibility: visible;
		opacity: 1;
		transform: scale(1) translateY(0);
	}

	.popover-header {
		padding: 1.5rem;
		text-align: left;
		border-bottom: 1px solid rgba(0, 0, 0, 0.06);
		position: relative;
	}

	.popover-header h3 {
		margin: 0;
		font-size: 1.6rem;
		font-weight: 400;
		letter-spacing: -0.01em;
	}

	.popover-content {
		overflow-y: auto;
		max-height: 320px;
	}

	.interest-items-list {
		padding: 1.5rem;
	}

	:global(.empty-state) {
		text-align: center;
		color: var(--gray);
		font-size: 0.9rem;
		padding: 3rem 2rem;
	}

	:global(.interest-item) {
		padding: 1rem 1.5rem;
		border-bottom: 1px solid rgba(0, 0, 0, 0.04);
		transition: background-color 0.2s ease;
	}

	:global(.interest-item:last-child) {
		border-bottom: none;
	}

	:global(.interest-item:hover) {
		background-color: rgba(0, 0, 0, 0.02);
	}

	:global(.item-content) {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: 1rem;
		min-height: 28px;
	}

	:global(.item-title) {
		font-size: 0.95rem;
		color: var(--black);
		flex: 1;
		line-height: 1.4;
		font-weight: 500;
		text-align: left;
		padding-right: 1rem;
	}

	:global(.remove-item) {
		background: none;
		border: none;
		color: rgba(0, 0, 0, 0.4);
		cursor: pointer;
		width: 32px;
		height: 32px;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 50%;
		transition: all 0.2s ease;
		flex-shrink: 0;
	}

	:global(.remove-item svg) {
		width: 18px;
		height: 18px;
		stroke-width: 1.5;
	}

	:global(.remove-item:hover) {
		background-color: rgba(0, 0, 0, 0.06);
		color: rgba(0, 0, 0, 0.8);
		transform: scale(1.05);
	}

	@media (max-width: 768px) {
		.cards-grid {
			grid-template-columns: 1fr;
		}

		h2 {
			font-size: 2rem;
		}

		.container {
			padding: 0 1rem;
		}

		.tabs {
			flex-wrap: wrap;
			gap: 0.5rem;
		}

		.tab {
			padding: 0.5rem 1rem;
			font-size: 0.9rem;
		}

		.interest-button {
			bottom: 1rem;
			right: 1rem;
			width: 50px;
			height: 50px;
		}

		.interest-button .heart-icon svg {
			width: 18px;
			height: 18px;
		}

		.interest-button .interest-count {
			font-size: 0.7rem;
			min-width: 16px;
			height: 16px;
			border-radius: 8px;
		}

		/* Mobile: Use smaller popover or fallback to bottom sheet */
		.interest-popover {
			width: calc(100vw - 32px);
			max-width: 300px;
			max-height: 60vh;
		}

		.popover-content {
			max-height: calc(60vh - 80px);
		}
	}

	@media (max-width: 1024px) and (min-width: 769px) {
		.cards-grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}
</style>
