---
const { t } = Astro.props;
import { Container } from "@lucide/astro";
import ItemPopup from "../items/ItemPopup.astro";
import plansData from "@data/plans_data.json";
import { loadItemsData } from "../../utils/items-loader";

const lang = Astro.currentLocale || "zh-Hant";
const itemsData = await loadItemsData(lang);
---

<section id="plans">
	<h2>{t.title}</h2>
	<div class="container">
		<div class="plans-table">
			<div class="plans-header">
				{
					plansData.tiers.map((tier: any) => (
						<div class="tier-column">
							<div class="tier-name" style={`color: ${tier.textColor}`}>
								{t.tier_names[tier.name]}
							</div>
							<div class="tier-price">{tier.price}</div>
							<button class="tier-interest-button" data-tier-name={tier.name} data-tier-title={t.tier_names[tier.name]}>
								{t.interested}
							</button>
						</div>
					))
				}
			</div>

			<div class="plans-content">
				{
					plansData.rows.map((row: any) => (
						<div class="plan-row" data-row-id={row.id}>
							{row.values.map((value: any) => {
								// Handle number + unit structure
								const hasNumber = value.number !== undefined;
								const mainText = value.textKey ? t.features[value.textKey] : value.main || "";
								const subText = value.subKey ? t.features[value.subKey] : value.sub || "";
								const unitText = value.unitKey ? t.unit[value.unitKey.split(".").pop()] : "";

								return (
									<div class="plan-cell">
										{value.icon && (
											<div class="cell-icon">
												{Array.from({ length: value.icon }, (_, i) => (
													<Container key={i} />
												))}
											</div>
										)}
										{hasNumber ? (
											<div class="cell-main cell-number">
												{value.number} {unitText}
											</div>
										) : (
											<div class="cell-main cell-text">{mainText}</div>
										)}
										{subText && <div class="cell-sub">{subText}</div>}
									</div>
								);
							})}
						</div>
					))
				}
			</div>
		</div>
	</div>
</section>

{
	plansData.rows.map((row: any) => {
		const matchingItem = itemsData.find((item: any) => item.id === row.id);
		if (matchingItem) {
			return <ItemPopup item={matchingItem} t={t} />;
		}
	})
}

<script>
	import { isItemInterested, addInterestedItem, removeInterestedItem, type InterestedItem } from "../../utils/local-storage.ts";

	declare function popupCtrl(id: string, action: string): void;

	function updateHighlighting() {
		const planRows = document.querySelectorAll(".plan-row");
		planRows.forEach(row => {
			const rowId = row.getAttribute("data-row-id");
			if (rowId) {
				const isHighlighted = isItemInterested(rowId);

				const clickableCells = row.querySelectorAll(".plan-cell");
				clickableCells.forEach(cell => {
					if (isHighlighted) {
						// Check if cell contains unavailable content
						const cellText = cell.textContent?.trim();
						const isUnavailable = cellText === "" || cellText === "—" || cellText === "-" || cellText?.includes("不適用") || cellText?.includes("N/A");

						if (!isUnavailable) {
							cell.classList.add("highlighted");
						} else {
							cell.classList.remove("highlighted");
						}
					} else {
						cell.classList.remove("highlighted");
					}
				});
			}
		});
	}

	function addRowClickHandlers() {
		const planRows = document.querySelectorAll(".plan-row") as NodeListOf<HTMLElement>;
		planRows.forEach(row => {
			const rowIdStr = row.getAttribute("data-row-id");
			if (rowIdStr) {
				row.style.cursor = "pointer";
				row.addEventListener("click", function (e) {
					e.stopPropagation();
					const popupId = `plan-popup-${rowIdStr}`;
					popupCtrl(popupId, "open");
				});
			}
		});
	}

	function removeAllTierItems() {
		const interestedItems = JSON.parse(localStorage.getItem("interestItems") || "[]");
		const tierItems = interestedItems.filter((item: InterestedItem) => item.id.startsWith("tier-"));

		tierItems.forEach((tierItem: InterestedItem) => {
			removeInterestedItem(tierItem.id);
		});
	}

	function addTierInterestHandlers() {
		const tierButtons = document.querySelectorAll(".tier-interest-button");
		tierButtons.forEach(button => {
			const tierName = button.getAttribute("data-tier-name");
			const tierTitle = button.getAttribute("data-tier-title");
			if (tierName && tierTitle) {
				button.addEventListener("click", function (e) {
					e.stopPropagation();
					const tierItem = {
						id: `tier-${tierName}`,
						title: tierTitle,
						category: "plan",
						image: "",
						deadline: ""
					};

					if (isItemInterested(tierItem.id)) {
						removeInterestedItem(tierItem.id);
						button.classList.remove("interested");
					} else {
						// Remove all other tier items first
						removeAllTierItems();
						// Then add the new tier
						addInterestedItem(tierItem);
						button.classList.add("interested");
					}
				});
			}
		});
	}

	function updateTierButtonStates() {
		const tierButtons = document.querySelectorAll(".tier-interest-button");
		tierButtons.forEach(button => {
			const tierName = button.getAttribute("data-tier-name");
			if (tierName) {
				const tierId = `tier-${tierName}`;
				if (isItemInterested(tierId)) {
					button.classList.add("interested");
				} else {
					button.classList.remove("interested");
				}
			}
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		updateHighlighting();
		addRowClickHandlers();
		addTierInterestHandlers();
		updateTierButtonStates();
	});

	window.addEventListener("itemsChange", function () {
		updateHighlighting();
		updateTierButtonStates();
	});
	document.addEventListener("interested-items-changed", function () {
		updateHighlighting();
		updateTierButtonStates();
	});
</script>

<style>
	section {
		background-color: var(--items-bg);
		padding: 5rem 0;
	}
	.container {
		max-width: 100rem;
		border-radius: 2rem;
		background-color: var(--white);
		width: calc(100% - 4rem);
		margin: 0 auto;
		padding: 5rem;
		flex: auto;
		display: flex;
		justify-content: center;
	}

	h2 {
		font-size: 3rem;
		color: var(--black);
		text-align: center;
		margin-bottom: 3rem;
		font-weight: 700;
	}

	.plans-table {
		max-width: 1200px;
		background-color: var(--white);
		border-radius: 2rem;
		overflow: hidden;
		padding: 2rem;
	}

	.plans-header {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: 2rem;
		margin-bottom: 2rem;
		padding-bottom: 2rem;
	}

	.tier-column {
		text-align: center;
		position: relative;
	}

	.tier-column::after {
		content: "";
		position: absolute;
		bottom: -2rem;
		left: 10%;
		right: 10%;
		height: 1px;
		background-color: var(--border-light);
	}

	.tier-name {
		font-size: 3rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		line-height: 1.2;
	}

	.tier-price {
		font-size: 2rem;
		font-weight: 600;
		color: var(--black);
		margin-bottom: 1rem;
	}

	.tier-interest-button {
		background: transparent;
		border: 1px solid var(--black);
		cursor: pointer;
		padding: 0.5rem 1rem;
		border-radius: 25px;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.2s ease;
		margin: 0 auto;
		font-size: 0.9rem;
		color: var(--black);
		white-space: nowrap;
	}

	.tier-interest-button:hover {
		background-color: var(--gray-container);
		transform: scale(1.02);
	}

	.tier-interest-button.interested {
		background-color: var(--items-green);
		border-color: var(--items-green);
		color: var(--white);
	}

	.tier-interest-button.interested:hover {
		background-color: var(--items-green);
		opacity: 0.9;
	}

	.plans-content {
		display: grid;
		gap: 1rem;
	}

	.plan-row {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: 2rem;
		padding: 1rem 0;
	}

	.plan-cell {
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
	}

	.plan-cell.highlighted .cell-main,
	.plan-cell.highlighted .cell-sub,
	.plan-cell.highlighted .cell-icon {
		color: var(--items-green);
		font-weight: 600;
	}

	.cell-icon {
		display: flex;
		gap: 0.25rem;
		justify-content: center;
		margin-bottom: 0.5rem;
	}

	.cell-icon svg {
		width: 1.25rem;
		height: 1.25rem;
	}

	.cell-main {
		line-height: 1.3;
	}

	.cell-number {
		font-size: 2rem;
		font-weight: bold;
		color: var(--black);
	}

	.cell-text {
		font-size: 1rem;
		font-weight: normal;
		color: var(--black);
	}

	.cell-sub {
		font-size: 1rem;
		color: var(--black);
		line-height: 1.2;
	}

	@media (max-width: 1024px) {
		.plans-table {
			width: (100% - 2rem);
			overflow-x: auto;
			padding: 1.5rem;
		}

		.tier-name {
			font-size: 2rem;
		}

		.tier-price {
			font-size: 1.5rem;
		}

		.tier-interest-button {
			font-size: 0.8rem;
			padding: 0.4rem 0.8rem;
		}

		.plans-header,
		.plan-row {
			min-width: 800px;
		}

		h2 {
			font-size: 2.5rem;
		}
	}

	@media (max-width: 768px) {
		.container {
			width: calc(100% - 2rem);
			padding: 2rem 1rem;
		}

		.plans-table {
			padding: 1rem;
		}

		h2 {
			font-size: 2rem;
			margin-bottom: 2rem;
		}

		.tier-name {
			font-size: 1.2rem;
		}

		.tier-price {
			font-size: 1rem;
		}

		.tier-interest-button {
			font-size: 0.7rem;
			padding: 0.3rem 0.6rem;
		}

		.plans-header,
		.plan-row {
			gap: 1rem;
			min-width: 600px;
		}

		.cell-main {
			font-size: 0.9rem;
		}

		.cell-sub {
			font-size: 0.8rem;
		}
	}

	@media (max-width: 480px) {
		section {
			width: calc(100% - 2rem);
			padding: 2rem 0;
		}

		h2 {
			font-size: 1.8rem;
		}

		.plans-table {
			padding: 0.75rem;
		}

		.plans-header,
		.plan-row {
			min-width: 500px;
		}
	}

	/* Plan row hover effect */
	.plan-row:hover {
		background-color: var(--items-bg);
		border-radius: 0.5rem;
		transition: background-color 0.2s ease;
	}
</style>

<style is:global></style>
