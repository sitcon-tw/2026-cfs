---
const { t } = Astro.props;
import Popup from "@components/Popup.astro";
import Volunteer from "@assets/img/sitcon-volunteer.jpg";
import SchoolsText from "@assets/img/schools-text.svg";
---

<section id="about" class="about-section">
	<div style="display: none;">
		<p id="chart-attender-data">{JSON.stringify(t.popup.chart.attender_role)}</p>
		<p id="chart-programming-level-data">{JSON.stringify(t.popup.chart.programming_level)}</p>
		<p id="chart-unit">{t.popup.chart.unit}</p>
		<p id="attender-role-title">{t.popup.chart.attender_role_title}</p>
		<p id="chart-programming-level-titlea">{t.popup.chart.programming_level_title}</p>
	</div>
	<div class="container">
		<!-- 主標題 -->
		<div class="title-section">
			<h2 class="subtitle">{t.subtitle}</h2>
			<h1 class="main-title">{t.title}</h1>
		</div>

		<!-- 統計卡片 -->
		<div class="stats-cards">
			{
				[
					{
						image: "/cfs/attendee-stat.jpg",
						data: [t.stats[0]]
					},
					{
						image: "/cfs/speaker-stat.jpg",
						data: [t.stats[1]]
					},
					{
						image: "/cfs/events-stat.jpg",
						data: [t.stats[2], t.stats[3]]
					},
					{
						image: "/cfs/volunteer-stat.jpg",
						data: [t.stats[4]]
					}
				].map(card => (
					<div class="stat-card" style={`background: url(${card.image}) lightgray 50% / cover no-repeat;`}>
						<div class="card-overlay" />
						<div class="card-content">
							{card.data.map(stat => (
								<div class="stat-item">
									{stat.prefix && <div class="stat-prefix">{stat.prefix}</div>}
									<div class="stat-number">{stat.number}</div>
									<div class="stat-label">{stat.label}</div>
								</div>
							))}
						</div>
					</div>
				))
			}
		</div>
		<div class="review-section">
			<h3 class="review-title">{t.review.title}</h3>
			<div class="review-stats">
				{
					t.review.stats.map((stat: { label: string; number: string; note: string }) => (
						<div class="review-item">
							{stat.label && <span class="review-label">{stat.label}</span>}
							<span class="review-number">{stat.number}</span>
							{stat.note && <span class="review-note">{stat.note}</span>}
						</div>
					))
				}
			</div>
		</div>
	</div>
	<Popup btnText={t.detail} title={t.detail} background={Volunteer.src} id="stat-popup" class="popup">
		<div class="popup-body">
			<p class="title">{t.popup.title}</p>
			<div class="chart-area">
				<canvas id="role-chart"></canvas>
				<canvas id="level-chart"></canvas>
				<div></div>
				<div id="level-info">
					{
						Object.entries(t.popup.chart.level_info).map(([key, value]) => (
							<p>
								{key} : {value}
							</p>
						))
					}
				</div>
			</div>
			<div id="schools-text-container">
				<img src={SchoolsText.src} alt="Schools" id="schools-text" />
			</div>
		</div>
	</Popup>
</section>
<script lang="js">
	const colors = ["#6CE5E8", "#40B8D5", "#2C8BBA", "#2F5F98", "#31356E", "#5E3967", "#895273", "#B97286", "#E28385"];
	const unit = document.getElementById("chart-unit").textContent;
	const roleTitle = document.getElementById("attender-role-title").textContent;
	const roleEle = document.getElementById("role-chart");
	const attenderRoleData = JSON.parse(document.getElementById("chart-attender-data").textContent);
	const roleData = {
		labels: Object.keys(attenderRoleData),
		datasets: [
			{
				label: unit,
				data: Object.values(attenderRoleData),
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};

	const levelTitle = document.getElementById("chart-programming-level-titlea").textContent;
	const levelEle = document.getElementById("level-chart");
	const programmingLevelData = JSON.parse(document.getElementById("chart-programming-level-data").textContent);
	const levelData = {
		labels: Object.keys(programmingLevelData),
		datasets: [
			{
				label: unit,
				data: Object.values(programmingLevelData),
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};

	for (let i = 0; i < 2; i++) {
		new Chart(i == 0 ? roleEle : levelEle, {
			type: "doughnut",
			data: i == 0 ? roleData : levelData,
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: true,
						position: "top",
						labels: {
							boxWidth: 20,
							boxHeight: 20,
							padding: 20,
							font: { size: 14 }
						}
					},
					title: {
						display: true,
						text: i == 0 ? roleTitle : levelTitle,
						font: {
							size: 30,
							weight: "bold"
						},
						padding: {
							bottom: 20
						},
						color: "#48484A"
					},
					datalabels: {
						clamp: true,
						color: "#000000",
						font: { weight: "bold", size: 14 },
						formatter: (value, ctx) => {
							const label = ctx.chart.data.labels[ctx.dataIndex];
							const total = ctx.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
							const percentage = ((value / total) * 100).toFixed(0) + "%";
							return value >= 100 ? `${label}: ${percentage}` : ``;
						},
						align: "end",
						anchor: "end"
					}
				}
			},
			plugins: [ChartDataLabels]
		});
	}
</script>
<style>
	#schools-text {
		max-width: 40rem;
		width: 100%;
	}
	#schools-text-container {
		display: flex;
		justify-content: center;
		margin-top: 5rem;
	}
	.chart-area {
		margin: 1rem 0;
		display: grid;
		grid-template-columns: 1fr 1fr;
		align-items: center;
		justify-items: center;
	}
	@media screen and (max-width: 1200px) {
		.chart-area {
			grid-template-columns: 1fr;
		}
	}
	canvas {
		max-width: 35em;
		max-height: 30rem;
		margin: auto;
		padding: 2rem 1.5rem 0 1.5rem;
	}
	#level-info {
		padding: 1rem 2rem;
		font-weight: 700;
		line-height: 125%;
	}
	.popup .container p {
		margin-bottom: 3rem;
		line-height: 150%;
	}
	.popup-body {
		padding: 2rem;
	}
	.title {
		font-size: 3rem;
		font-weight: 700;
	}
	.about-section {
		padding: 80px 0;
	}
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
	}

	.title-section {
		margin-bottom: 60px;
	}

	.subtitle {
		text-align: center;
		font-size: 2.4375rem;
		font-style: normal;
		font-weight: 700;
		line-height: 120%; /* 2.925rem */
	}

	.main-title {
		text-align: center;
		font-size: 3.375rem;
		font-style: normal;
		font-weight: 700;
		line-height: 120%; /* 4.05rem */
	}

	.stats-cards {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 24px;
		margin-bottom: 80px;
	}

	.stat-card {
		position: relative;
		border-radius: 1.75rem;
		padding: 24px;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
		transition:
			transform 0.2s ease,
			box-shadow 0.2s ease;
		overflow: hidden;
		height: 25rem;
		display: flex;
		align-items: flex-end;
	}

	.stat-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.15);
	}

	.card-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		border-radius: 1.75rem;
		background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000 100%);
		z-index: 1;
	}

	.card-content {
		position: relative;
		z-index: 2;
		width: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		column-gap: 1rem; /* space-x equivalent */
	}

	.stat-item {
		margin-bottom: 1rem;
	}

	.stat-number {
		color: var(--White, #fff);
		font-size: 3.625rem;
		font-weight: 700;
		line-height: 122%; /* 4.4225rem */
		letter-spacing: 0.0725rem;
		display: flex;
		flex-direction: column;
		justify-content: center;
		flex-shrink: 0;
		margin-bottom: 4px;
	}

	.stat-prefix,
	.stat-label {
		display: flex;
		flex-direction: column;
		justify-content: center;
		flex-shrink: 0;
		color: var(--White, #fff);
		font-size: 1.1875rem;
		font-style: normal;
		font-weight: 700;
		line-height: 122%; /* 1.44875rem */
		letter-spacing: 0.02375rem;
	}

	.review-section {
		margin-bottom: 60px;
	}

	.review-title {
		text-align: center;
		font-size: 1.625rem;
		font-style: normal;
		font-weight: 700;
		line-height: 133%; /* 2.16125rem */
		letter-spacing: 0.08125rem;
		margin-bottom: 2.5rem;
	}

	.review-stats {
		text-align: center;
	}

	.review-item {
		display: block;
		text-align: center;
		margin-bottom: 16px;
	}

	.review-label,
	.review-note {
		text-align: center;
		font-size: 2.5625rem;
		font-weight: 700;
		line-height: 133%; /* 3.40813rem */
		letter-spacing: 0.12813rem;
	}

	.review-number {
		color: #708dfa;
		font-size: 3.4375rem;
		font-style: normal;
		font-weight: 700;
		line-height: 133%;
		letter-spacing: 0.17188rem;
	}

	/* 響應式設計 */
	@media (max-width: 768px) {
		.about-section {
			padding: 60px 0;
		}

		.main-title {
			font-size: 2rem;
		}

		.stats-cards {
			grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
			gap: 16px;
			margin-bottom: 60px;
		}

		.stat-card {
			padding: 20px;
			height: 180px;
		}

		.stat-number {
			font-size: 2.5rem;
			width: auto;
			height: auto;
		}

		.stat-prefix,
		.stat-label {
			font-size: 1rem;
			width: auto;
			height: auto;
		}

		.review-stats {
			text-align: center;
		}

		.review-number {
			font-size: 1.5rem;
		}
	}

	@media (max-width: 480px) {
		.review-item {
			margin-bottom: 20px;
		}
	}
</style>
