---
const { t } = Astro.props;
import Popup from "@components/Popup.astro";
import Volunteer from "@assets/img/sitcon-volunteer.webp";
import SchoolsText from "@assets/img/schools-text.svg";
import AttendeeImg from "@assets/img/stat/attendee-stat.webp";
import SpeakerImg from "@assets/img/stat/speaker-stat.webp";
import EventsImg from "@assets/img/stat/events-stat.webp";
import VolunteerImg from "@assets/img/stat/volunteer-stat.webp";
---

<section id="about" class="about-section">
	<h2><span>{t.subtitle}</span>{t.title}</h2>
	<div class="stats-cards">
		{
			[
				{
					image: AttendeeImg.src,
					data: [t.stats[0]]
				},
				{
					image: SpeakerImg.src,
					data: [t.stats[1]]
				},
				{
					image: EventsImg.src,
					data: [t.stats[2], t.stats[3]]
				},
				{
					image: VolunteerImg.src,
					data: [t.stats[4]]
				}
			].map(card => (
				<div class="stat-card" style={`background: url(${card.image}) lightgray 50% / cover no-repeat;`}>
					<div class="card-content aos aos-fadeIn">
						{card.data.map(stat => (
							<div>
								<div class="stat-number">{stat.number}</div>
								<div class="stat-label">{stat.label}</div>
							</div>
						))}
					</div>
				</div>
			))
		}
	</div>
	<div class="rewind aos">
		<h3 class="review-title aos aos-fadeIn">{t.review.title}</h3>
		{
			t.review.stats.map((stat: { label: string; number: string; note: string }) => (
				<div class="review-item aos aos-fadeIn">
					{stat.label && <span>{stat.label}</span>}
					<span class="review-number">{stat.number}</span>
					{stat.note && <span>{stat.note}</span>}
				</div>
			))
		}
	</div>
	<Popup btnText={t.detail} title={t.detail} background={Volunteer.src} id="stat-popup" class="popup">
		<div class="container">
			<div class="chart-area">
				<canvas id="role-chart"></canvas>
				<canvas id="level-chart"></canvas>
				<div></div>
				<div id="level-info">
					{
						Object.entries(t.popup.chart.level_info).map(([key, value]) => (
							<p>
								{key} : {value}
							</p>
						))
					}
				</div>
			</div>
			<div id="schools-text-container">
				<h3>{t.popup.chart.schools_text_title}</h3>
				<img src={SchoolsText.src} alt="Schools" id="schools-text" />
			</div>
			<div class="social-media-section">
				<h3>{t.popup.chart.social_media.title}</h3>
				<div class="social-platforms">
					<div class="platform-section">
						<h4>{t.popup.chart.social_media.facebook.name}</h4>
						<div class="platform-stats">
							<div class="stats-info">
								<div class="stats-cards-wrapper">
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.followers}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.followers}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.reach}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.reach}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.views}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.views}</p>
									</div>
								</div>
							</div>
							<div class="charts-container">
								<canvas id="fb-age-chart"></canvas>
								<canvas id="fb-gender-chart"></canvas>
							</div>
						</div>
					</div>
					<div class="platform-section">
						<h4>{t.popup.chart.social_media.instagram.name}</h4>
						<div class="platform-stats">
							<div class="stats-info">
								<div class="stats-cards-wrapper">
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.followers}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.followers}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.reach}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.reach}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.views}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.views}</p>
									</div>
								</div>
							</div>
							<div class="charts-container">
								<canvas id="ig-age-chart"></canvas>
								<canvas id="ig-gender-chart"></canvas>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</Popup>
</section>
<div style="display: none;">
	<p id="chart-attender-data">{JSON.stringify(t.popup.chart.attender_role)}</p>
	<p id="chart-programming-level-data">{JSON.stringify(t.popup.chart.programming_level)}</p>
	<p id="chart-unit">{t.popup.chart.unit}</p>
	<p id="attender-role-title">{t.popup.chart.attender_role_title}</p>
	<p id="chart-programming-level-titlea">{t.popup.chart.programming_level_title}</p>
	<p id="fb-age-data">{JSON.stringify(t.popup.chart.social_media.facebook.age)}</p>
	<p id="fb-gender-data">{JSON.stringify(t.popup.chart.social_media.facebook.gender)}</p>
	<p id="ig-age-data">{JSON.stringify(t.popup.chart.social_media.instagram.age)}</p>
	<p id="ig-gender-data">{JSON.stringify(t.popup.chart.social_media.instagram.gender)}</p>
	<p id="fb-age-title">{t.popup.chart.social_media.facebook.name}{t.popup.chart.social_media.facebook.labels.age_distribution}</p>
	<p id="fb-gender-title">{t.popup.chart.social_media.facebook.name}{t.popup.chart.social_media.facebook.labels.gender_ratio}</p>
	<p id="ig-age-title">{t.popup.chart.social_media.instagram.name}{t.popup.chart.social_media.instagram.labels.age_distribution}</p>
	<p id="ig-gender-title">{t.popup.chart.social_media.instagram.name}{t.popup.chart.social_media.instagram.labels.gender_ratio}</p>
</div>

<script>
	import Chart from "chart.js/auto";
	import ChartDataLabels from "chartjs-plugin-datalabels";

	const colors = ["#6CE5E8", "#40B8D5", "#2C8BBA", "#2F5F98", "#31356E", "#5E3967", "#895273", "#B97286", "#E28385"];
	const unit = document.getElementById("chart-unit")!.textContent;
	const roleTitle = document.getElementById("attender-role-title")!.textContent;
	const roleEle = document.getElementById("role-chart");
	const attenderRoleData = JSON.parse(document.getElementById("chart-attender-data")!.textContent);
	const roleData = {
		labels: Object.keys(attenderRoleData),
		datasets: [
			{
				label: unit,
				data: Object.values(attenderRoleData) as number[],
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};

	const levelTitle = document.getElementById("chart-programming-level-titlea")!.textContent;
	const levelEle = document.getElementById("level-chart");
	const programmingLevelData = JSON.parse(document.getElementById("chart-programming-level-data")!.textContent);
	const levelData = {
		labels: Object.keys(programmingLevelData),
		datasets: [
			{
				label: unit,
				data: Object.values(programmingLevelData) as number[],
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};

	// Store chart instances
	let roleChart: any;
	let levelChart: any;
	let fbAgeChart: any;
	let fbGenderChart: any;
	let igAgeChart: any;
	let igGenderChart: any;

	Chart.defaults.font.family = '"LINESeedTW", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif';

	// Initialize main charts immediately (they're visible on page load)
	for (let i = 0; i < 2; i++) {
		const chart = new Chart(i == 0 ? (roleEle as HTMLCanvasElement) : (levelEle as HTMLCanvasElement), {
			type: "doughnut",
			data: i == 0 ? roleData : levelData,
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: true,
						position: "top",
						labels: {
							boxWidth: 20,
							boxHeight: 20,
							padding: 20,
							font: { size: 14 }
						}
					},
					title: {
						display: true,
						text: i == 0 ? roleTitle : levelTitle,
						font: {
							size: 30,
							weight: "bold"
						},
						padding: {
							bottom: 20
						},
						color: "#48484A"
					},
					datalabels: {
						clamp: true,
						color: "#000000",
						font: { weight: "bold", size: 14 },
						formatter: (value: any, ctx: any) => {
							const label = ctx.chart.data.labels![ctx.dataIndex];
							const total: number = ctx.chart.data.datasets[0].data.filter((v: any): v is number => typeof v === "number").reduce((a: number, b: number) => a + b, 0);
							const percentage = ((value / total) * 100).toFixed(0) + "%";
							return value >= 100 ? `${label}: ${percentage}` : ``;
						}
					}
				}
			},
			plugins: [ChartDataLabels]
		});

		if (i == 0) roleChart = chart;
		else levelChart = chart;
	}

	// Social Media Charts - Initialize when popup opens
	const socialMediaColors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"];

	function initializeSocialMediaCharts() {
		// Only initialize if charts haven't been created yet
		if (fbAgeChart && fbGenderChart && igAgeChart && igGenderChart) return;

		// Small delay to ensure popup is fully rendered
		setTimeout(() => {
			// Facebook Age Chart
			const fbAgeData = JSON.parse(document.getElementById("fb-age-data")!.textContent);
			const fbAgeTitle = document.getElementById("fb-age-title")!.textContent;
			const fbAgeCanvas = document.getElementById("fb-age-chart") as HTMLCanvasElement;

			if (fbAgeCanvas) {
				fbAgeChart = new Chart(fbAgeCanvas, {
					type: "doughnut",
					data: {
						labels: Object.keys(fbAgeData),
						datasets: [
							{
								data: Object.values(fbAgeData) as number[],
								backgroundColor: socialMediaColors,
								borderWidth: 1
							}
						]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: {
								display: true,
								position: "top",
								labels: { font: { size: 12 } }
							},
							title: {
								display: true,
								text: fbAgeTitle,
								font: { size: 20, weight: "bold" },
								color: "#48484A"
							},
							datalabels: {
								color: "#000000",
								font: { weight: "bold", size: 12 },
								formatter: (value: any) => {
									return value > 5 ? `${value}%` : "";
								}
							}
						}
					},
					plugins: [ChartDataLabels]
				});
			}

			// Facebook Gender Chart
			const fbGenderData = JSON.parse(document.getElementById("fb-gender-data")!.textContent);
			const fbGenderTitle = document.getElementById("fb-gender-title")!.textContent;
			const fbGenderCanvas = document.getElementById("fb-gender-chart") as HTMLCanvasElement;

			if (fbGenderCanvas) {
				fbGenderChart = new Chart(fbGenderCanvas, {
					type: "doughnut",
					data: {
						labels: Object.keys(fbGenderData),
						datasets: [
							{
								data: Object.values(fbGenderData) as number[],
								backgroundColor: ["#4FC3F7", "#FFB74D"],
								borderWidth: 1
							}
						]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: {
								display: true,
								position: "top",
								labels: { font: { size: 12 } }
							},
							title: {
								display: true,
								text: fbGenderTitle,
								font: { size: 20, weight: "bold" },
								color: "#48484A"
							},
							datalabels: {
								color: "#000000",
								font: { weight: "bold", size: 14 },
								formatter: (value: any) => `${value}%`
							}
						}
					},
					plugins: [ChartDataLabels]
				});
			}

			// Instagram Age Chart
			const igAgeData = JSON.parse(document.getElementById("ig-age-data")!.textContent);
			const igAgeTitle = document.getElementById("ig-age-title")!.textContent;
			const igAgeCanvas = document.getElementById("ig-age-chart") as HTMLCanvasElement;

			if (igAgeCanvas) {
				igAgeChart = new Chart(igAgeCanvas, {
					type: "doughnut",
					data: {
						labels: Object.keys(igAgeData),
						datasets: [
							{
								data: Object.values(igAgeData) as number[],
								backgroundColor: socialMediaColors,
								borderWidth: 1
							}
						]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: {
								display: true,
								position: "top",
								labels: { font: { size: 12 } }
							},
							title: {
								display: true,
								text: igAgeTitle,
								font: { size: 20, weight: "bold" },
								color: "#48484A"
							},
							datalabels: {
								color: "#000000",
								font: { weight: "bold", size: 12 },
								formatter: (value: any) => {
									return value > 5 ? `${value}%` : "";
								}
							}
						}
					},
					plugins: [ChartDataLabels]
				});
			}

			// Instagram Gender Chart
			const igGenderData = JSON.parse(document.getElementById("ig-gender-data")!.textContent);
			const igGenderTitle = document.getElementById("ig-gender-title")!.textContent;
			const igGenderCanvas = document.getElementById("ig-gender-chart") as HTMLCanvasElement;

			if (igGenderCanvas) {
				igGenderChart = new Chart(igGenderCanvas, {
					type: "doughnut",
					data: {
						labels: Object.keys(igGenderData),
						datasets: [
							{
								data: Object.values(igGenderData) as number[],
								backgroundColor: ["#4FC3F7", "#FFB74D"],
								borderWidth: 1
							}
						]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: {
								display: true,
								position: "top",
								labels: { font: { size: 12 } }
							},
							title: {
								display: true,
								text: igGenderTitle,
								font: { size: 20, weight: "bold" },
								color: "#48484A"
							},
							datalabels: {
								color: "#000000",
								font: { weight: "bold", size: 14 },
								formatter: (value: any) => `${value}%`
							}
						}
					},
					plugins: [ChartDataLabels]
				});
			}
		}, 100);
	}

	// Listen for popup open events
	document.addEventListener("popupOpened", (event: Event) => {
		const customEvent = event as CustomEvent;
		if (customEvent.detail && customEvent.detail.id === "stat-popup") {
			// Initialize social media charts when stats popup is opened
			setTimeout(initializeSocialMediaCharts, 200);
		}
	});

	// Also listen for window resize to refresh charts if needed
	let resizeTimeout: ReturnType<typeof setTimeout>;
	window.addEventListener("resize", () => {
		clearTimeout(resizeTimeout);
		resizeTimeout = setTimeout(() => {
			[roleChart, levelChart, fbAgeChart, fbGenderChart, igAgeChart, igGenderChart].forEach(chart => {
				if (chart) {
					chart.resize();
					chart.update("resize");
				}
			});
		}, 200);
	});
</script>
<style>
	#about {
		padding: 8rem 2rem 4rem;
	}

	.rewind {
		margin-bottom: 2rem;
		font-weight: 700;
		text-align: center;
		font-size: 2.5rem;
	}

	#schools-text {
		max-width: 40rem;
		width: 100%;
		margin: auto;display: block;
	}
	#schools-text-container {
		margin-top: 5rem;
	}
	.chart-area {
		margin: 1rem 0;
		display: grid;
		grid-template-columns: 1fr 1fr;
		align-items: center;
		justify-items: center;
	}

	canvas {
		max-width: 35em;
		max-height: 30rem;
		margin: auto;
		padding: 2rem 1.5rem 0 1.5rem;
	}
	#level-info {
		padding: 1rem 2rem;
		font-weight: 700;
		line-height: 125%;
	}

	.stats-cards {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 2rem;
		color: var(--white);
	}

	.stat-card {
		position: relative;
		flex: 1;
		max-width: 15rem;
		display: flex;
		justify-content: end;
		flex-direction: column;
		border-radius: 1.75rem;
		padding: 15rem 1rem 3rem;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
	}

	.stat-card::before {
		content: "";
		position: absolute;
		inset: 0;
		border-radius: 1.75rem;
		background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, #000 100%);
		opacity: 0;
		transition: opacity 0.3s;
	}
	.stat-card:has(.appeared)::before {
		opacity: 1;
	}

	.card-content {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 1rem;
		animation-delay: 0.3s;
	}

	.stat-number {
		font-size: 3rem;
		text-align: center;
		font-family: "firacode", monospace;
		font-weight: 500;
	}

	.stat-label {
		white-space: nowrap;
		text-align: center;
	}

	.review-title {
		font-size: 1.625rem;
		margin-block: 6rem 2.5rem;
		text-align: center;
	}

	.review-number {
		color: #708dfa;
		font-size: 1.5em;
	}

	@media (max-width: 70rem) {
		.stat-card {
			flex: 1 1 calc(50% - 2rem);
			padding: 5rem 1rem 2rem;
			max-width: 23rem;
		}

		.stat-card::before {
			background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000 100%);
		}

		h2 span {
			display: block;
		}

		#about {
			padding-top: 4rem;
		}
		.review-item {
			font-size: 2rem;
		}
	}
	@media (max-width: 40rem) {
		.stat-number {
			font-size: 2.5rem;
		}
	}

	@media (max-width: 33rem) {
		.stat-card {
			flex: 1 1 100%;
			max-width: 100%;
		}
	}
	@media (max-width: 75rem) {
		.chart-area {
			grid-template-columns: 1fr;
		}
	}

	/* Social Media Styles */
	.social-media-section {
		margin-top: 3rem;
		padding: 2rem;
		border-top: 1px solid #e0e0e0;
	}

	 h3 {
		text-align: center;
		font-size: 1.8rem;
		margin-bottom: 2rem;
		color: #48484a;
		font-weight: bold;
	}

	.social-platforms {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 3rem;
	}

	.platform-section h4 {
		text-align: center;
		font-size: 1.4rem;
		margin-bottom: 1.5rem;
		color: #48484a;
		font-weight: bold;
	}

	.stats-info {
		margin-bottom: 2rem;
		text-align: center;
	}

	.stats-info p {
		margin: 0.5rem 0;
		font-size: 1rem;
		color: #666;
		font-weight: 500;
	}

	.charts-container {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		align-items: center;
	}

	.charts-container canvas {
		/* max-width: 300px;
		max-height: 250px; */
		padding: 1rem;
	}

	@media (max-width: 75rem) {
		.social-platforms {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.charts-container {
			flex-direction: row;
			justify-content: space-around;
		}

		.charts-container canvas {
			max-width: 250px;
			width: 100%;
			height: 360px;
		}
	}

	@media (max-width: 50rem) {
		.charts-container {
			flex-direction: column;
		}

		.charts-container canvas {
			max-width: 100%;
		}
	}
	.stats-cards-wrapper {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 1rem;
		width: 100%;
		margin-bottom: 1.5rem;
	}

	.stats-card-item {
		border-radius: 0.5rem;
		padding: 1rem 0.5rem;
		background-color: #f8f9fa;
		text-align: center;
		width: 100%;
		border: 2px solid #e9ecef;
	}

	.stats-card-item p {
		font-size: 1.1rem;
		color: #333;
		font-weight: 500;
	}

	.stats-card-item p.stats-value {
		font-weight: 600;
		font-size: 1.3rem;
		margin-top: 0.5rem;
	}

	@media (max-width: 600px) {
		.stats-cards-wrapper {
			grid-template-columns: 1fr;
		}
	}
</style>
