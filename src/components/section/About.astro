---
const { t } = Astro.props;
import Popup from "@components/Popup.astro";
import Volunteer from "@assets/img/sitcon-volunteer.jpg";
import SchoolsText from "@assets/img/schools-text.svg";
---

<section id="about" class="about-section">
	<h2><span>{t.subtitle}</span>{t.title}</h2>
	<div class="stats-cards">
		{
			[
				{
					image: "/cfs/attendee-stat.jpg",
					data: [t.stats[0]]
				},
				{
					image: "/cfs/speaker-stat.jpg",
					data: [t.stats[1]]
				},
				{
					image: "/cfs/events-stat.jpg",
					data: [t.stats[2], t.stats[3]]
				},
				{
					image: "/cfs/volunteer-stat.jpg",
					data: [t.stats[4]]
				}
			].map(card => (
				<div class="stat-card" style={`background: url(${card.image}) lightgray 50% / cover no-repeat;`}>
					<div class="card-content aos aos-fadeIn">
						{card.data.map(stat => (
							<div>
								<div class="stat-number emfont-FiraMono-500">{stat.number}</div>
								<div class="stat-label">{stat.label}</div>
							</div>
						))}
					</div>
				</div>
			))
		}
	</div>
	<div class="rewind aos">
		<h3 class="review-title aos aos-fadeIn">{t.review.title}</h3>
		{
			t.review.stats.map((stat: { label: string; number: string; note: string }) => (
				<div class="review-item aos aos-fadeIn">
					{stat.label && <span>{stat.label}</span>}
					<span class="review-number">{stat.number}</span>
					{stat.note && <span>{stat.note}</span>}
				</div>
			))
		}
	</div>
	<Popup btnText={t.detail} title={t.detail} background={Volunteer.src} id="stat-popup" class="popup">
		<div class="container">
			<h3>{t.popup.title}</h3>
			<div class="chart-area">
				<canvas id="role-chart"></canvas>
				<canvas id="level-chart"></canvas>
				<div></div>
				<div id="level-info">
					{
						Object.entries(t.popup.chart.level_info).map(([key, value]) => (
							<p>
								{key} : {value}
							</p>
						))
					}
				</div>
			</div>
			<div id="schools-text-container">
				<img src={SchoolsText.src} alt="Schools" id="schools-text" />
			</div>
		</div>
	</Popup>
</section>
<div style="display: none;">
	<p id="chart-attender-data">{JSON.stringify(t.popup.chart.attender_role)}</p>
	<p id="chart-programming-level-data">{JSON.stringify(t.popup.chart.programming_level)}</p>
	<p id="chart-unit">{t.popup.chart.unit}</p>
	<p id="attender-role-title">{t.popup.chart.attender_role_title}</p>
	<p id="chart-programming-level-titlea">{t.popup.chart.programming_level_title}</p>
</div>

<script>
	import Chart from "chart.js/auto";
	import ChartDataLabels from "chartjs-plugin-datalabels";

	const colors = ["#6CE5E8", "#40B8D5", "#2C8BBA", "#2F5F98", "#31356E", "#5E3967", "#895273", "#B97286", "#E28385"];
	const unit = document.getElementById("chart-unit")!.textContent;
	const roleTitle = document.getElementById("attender-role-title")!.textContent;
	const roleEle = document.getElementById("role-chart");
	const attenderRoleData = JSON.parse(document.getElementById("chart-attender-data")!.textContent);
	const roleData = {
		labels: Object.keys(attenderRoleData),
		datasets: [
			{
				label: unit,
				data: Object.values(attenderRoleData),
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};

	const levelTitle = document.getElementById("chart-programming-level-titlea")!.textContent;
	const levelEle = document.getElementById("level-chart");
	const programmingLevelData = JSON.parse(document.getElementById("chart-programming-level-data")!.textContent);
	const levelData = {
		labels: Object.keys(programmingLevelData),
		datasets: [
			{
				label: unit,
				data: Object.values(programmingLevelData),
				borderWidth: 1,
				backgroundColor: colors,
				hoverOffset: 5
			}
		]
	};
	for (let i = 0; i < 2; i++) {
		new Chart(i == 0 ? (roleEle as HTMLCanvasElement) : (levelEle as HTMLCanvasElement), {
			type: "doughnut",
			data: i == 0 ? roleData : levelData,
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: true,
						position: "top",
						labels: {
							boxWidth: 20,
							boxHeight: 20,
							padding: 20,
							font: { size: 14 }
						}
					},
					title: {
						display: true,
						text: i == 0 ? roleTitle : levelTitle,
						font: {
							size: 30,
							weight: "bold"
						},
						padding: {
							bottom: 20
						},
						color: "#48484A"
					},
					datalabels: {
						clamp: true,
						color: "#000000",
						font: { weight: "bold", size: 14 },
						formatter: (value, ctx) => {
							const label = ctx.chart.data.labels![ctx.dataIndex];
							const total: number = ctx.chart.data.datasets[0].data.filter((v): v is number => typeof v === "number").reduce((a, b) => a + b, 0);
							const percentage = ((value / total) * 100).toFixed(0) + "%";
							return value >= 100 ? `${label}: ${percentage}` : ``;
						}
					}
				}
			},
			plugins: [ChartDataLabels]
		});
	}
</script>
<style>
	#about {
		padding: 8rem 2rem 4rem;
	}

	.rewind {
		margin-bottom: 2rem;
		font-weight: 700;
		text-align: center;
		font-size: 2.5rem;
	}

	#schools-text {
		max-width: 40rem;
		width: 100%;
	}
	#schools-text-container {
		display: flex;
		justify-content: center;
		margin-top: 5rem;
	}
	.chart-area {
		margin: 1rem 0;
		display: grid;
		grid-template-columns: 1fr 1fr;
		align-items: center;
		justify-items: center;
	}

	canvas {
		max-width: 35em;
		max-height: 30rem;
		margin: auto;
		padding: 2rem 1.5rem 0 1.5rem;
	}
	#level-info {
		padding: 1rem 2rem;
		font-weight: 700;
		line-height: 125%;
	}

	.stats-cards {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 2rem;
		color: var(--white);
	}

	.stat-card {
		position: relative;
		flex: 1;
		max-width: 15rem;
		display: flex;
		justify-content: end;
		flex-direction: column;
		border-radius: 1.75rem;
		padding: 15rem 1rem 3rem;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
	}

	.stat-card::before {
		content: "";
		position: absolute;
		inset: 0;
		border-radius: 1.75rem;
		background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, #000 100%);
		opacity: 0;
		transition: opacity 0.3s;
	}
	.stat-card:has(.appeared)::before {
		opacity: 1;
	}

	.card-content {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 1rem;
		animation-delay: 0.3s;
	}

	.stat-number {
		font-size: 3.5rem;
		text-align: center;
	}

	.stat-label {
		white-space: nowrap;
		text-align: center;
	}

	.review-title {
		font-size: 1.625rem;
		margin-block: 6rem 2.5rem;
		text-align: center;
	}

	.review-number {
		color: #708dfa;
		font-size: 1.5em;
	}

	@media (max-width: 70rem) {
		.stat-card {
			flex: 1 1 calc(50% - 2rem);
			padding: 5rem 1rem 2rem;
			max-width: 23rem;
		}

		.stat-card::before {
			background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000 100%);
		}

		h2 span {
			display: block;
		}

		#about {
			padding-top: 4rem;
		}
		.review-item {
			font-size: 2rem;
		}
	}
	@media (max-width: 40rem) {
		.stat-number {
			font-size: 2.5rem;
		}
	}

	@media (max-width: 33rem) {
		.stat-card {
			flex: 1 1 100%;
			max-width: 100%;
		}
	}
	@media (max-width: 75rem) {
		.chart-area {
			grid-template-columns: 1fr;
		}
	}
</style>
