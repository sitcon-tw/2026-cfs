---
const { t } = Astro.props;
import Popup from "@components/Popup.astro";
import Volunteer from "@assets/img/sitcon-volunteer.webp";
import SchoolsText from "@assets/img/schools-text-2025.svg";
import AttendeeImg from "@assets/img/stat/attendee-stat.webp";
import SpeakerImg from "@assets/img/stat/speaker-stat.webp";
import EventsImg from "@assets/img/stat/events-stat.webp";
import VolunteerImg from "@assets/img/stat/volunteer-stat.webp";

const chartData = JSON.stringify({
	attenderRole: t.popup.chart.attender_role,
	programmingLevel: t.popup.chart.programming_level,
	unit: t.popup.chart.unit,
	attenderRoleTitle: t.popup.chart.attender_role_title,
	programmingLevelTitle: t.popup.chart.programming_level_title,
	fbAge: t.popup.chart.social_media.facebook.age,
	fbGender: t.popup.chart.social_media.facebook.gender,
	igAge: t.popup.chart.social_media.instagram.age,
	igGender: t.popup.chart.social_media.instagram.gender,
	fbAgeTitle: `${t.popup.chart.social_media.facebook.name} ${t.popup.chart.social_media.facebook.labels.age_distribution}`,
	fbGenderTitle: `${t.popup.chart.social_media.facebook.name} ${t.popup.chart.social_media.facebook.labels.gender_ratio}`,
	igAgeTitle: `${t.popup.chart.social_media.instagram.name} ${t.popup.chart.social_media.instagram.labels.age_distribution}`,
	igGenderTitle: `${t.popup.chart.social_media.instagram.name} ${t.popup.chart.social_media.instagram.labels.gender_ratio}`
});
---

<section id="about" class="about-section">
	<h2><span>{t.subtitle}</span>{t.title}</h2>
	<div class="stats-cards">
		{
			[
				{
					image: AttendeeImg.src,
					data: [t.stats[0]]
				},
				{
					image: SpeakerImg.src,
					data: [t.stats[1]]
				},
				{
					image: EventsImg.src,
					data: [t.stats[2], t.stats[3]]
				},
				{
					image: VolunteerImg.src,
					data: [t.stats[4]]
				}
			].map(card => (
				<div class="stat-card" style={`background: url(${card.image}) lightgray 50% / cover no-repeat;`}>
					<div class={"card-content aos aos-fadeIn" + (card.data[0].label == "meetups and talks" ? " space" : "")}>
						{card.data.map(stat => (
							<div>
								<div class="stat-number">{stat.number}</div>
								<div class="stat-label">{stat.label}</div>
							</div>
						))}
					</div>
				</div>
			))
		}
	</div>
	<div class="rewind aos">
		<h3 class="review-title aos aos-fadeIn">{t.review.title}</h3>
		{
			t.review.stats.map((stat: { label: string; number: string; note: string }) => (
				<div class="review-item aos aos-fadeIn">
					{stat.label && <span>{stat.label}</span>}
					<span class="review-number">{stat.number}</span>
					{stat.note && <span>{stat.note}</span>}
				</div>
			))
		}
	</div>
	<Popup btnText={t.detail} title={t.detail} background={Volunteer.src} id="stat-popup" class="popup">
		<div class="container">
			<div class="chart-area">
				<div id="role-chart" class="chart-container"></div>
				<div class="level">
					<div id="level-chart" class="chart-container"></div>
					<div id="level-info">
						{
							Object.entries(t.popup.chart.level_info).map(([key, value]) => (
								<p>
									{key} : {value}
								</p>
							))
						}
					</div>
				</div>
			</div>
			<div id="schools-text-container">
				<h3>{t.popup.chart.schools_text_title}</h3>
				<img src={SchoolsText.src} alt="Schools" id="schools-text" />
			</div>
			<div class="social-media-section">
				<h3>{t.popup.chart.social_media.title}</h3>
				<div class="social-platforms">
					<div class="platform-section">
						<h4>{t.popup.chart.social_media.facebook.name}</h4>
						<div class="platform-stats">
							<div class="stats-info">
								<div class="stats-cards-wrapper">
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.followers}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.followers}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.reach}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.reach}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.facebook.labels.views}</p>
										<p class="stats-value">{t.popup.chart.social_media.facebook.stats.views}</p>
									</div>
								</div>
							</div>
							<div class="charts-container">
								<div id="fb-age-chart" class="chart-container"></div>
								<div id="fb-gender-chart" class="chart-container"></div>
							</div>
						</div>
					</div>
					<div class="platform-section">
						<h4>{t.popup.chart.social_media.instagram.name}</h4>
						<div class="platform-stats">
							<div class="stats-info">
								<div class="stats-cards-wrapper">
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.followers}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.followers}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.reach}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.reach}</p>
									</div>
									<div class="stats-card-item">
										<p>{t.popup.chart.social_media.instagram.labels.views}</p>
										<p class="stats-value">{t.popup.chart.social_media.instagram.stats.views}</p>
									</div>
								</div>
							</div>
							<div class="charts-container">
								<div id="ig-age-chart" class="chart-container"></div>
								<div id="ig-gender-chart" class="chart-container"></div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</Popup>
	<div style="display:none" id="chart-data">{chartData}</div>
</section>

<script>
	// @ts-ignore - echarts esm interop
	import * as echarts from "echarts";
	type EChartsInstance = ReturnType<typeof echarts.init>;

	const colors = ["#6CE5E8", "#40B8D5", "#2C8BBA", "#2F5F98", "#31356E", "#5E3967", "#895273", "#B97286", "#E28385"];
	const socialMediaColors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"];

	const chartDataElement = document.getElementById("chart-data");
	const chartData = chartDataElement ? JSON.parse(chartDataElement.textContent || "{}") : {};
	// Store chart instances
	let roleChart: EChartsInstance | null = null;
	let levelChart: EChartsInstance | null = null;
	let fbAgeChart: EChartsInstance | null = null;
	let fbGenderChart: EChartsInstance | null = null;
	let igAgeChart: EChartsInstance | null = null;
	let igGenderChart: EChartsInstance | null = null;

	function createPieData(data: Record<string, number>, colors: string[]) {
		return Object.entries(data).map(([name, value], index) => ({
			name,
			value,
			itemStyle: { color: colors[index % colors.length] }
		}));
	}

	function createPieOption(title: string, data: Array<{ name: string; value: number; itemStyle: { color: string } }>, showPercentage = true) {
		const total = data.reduce((sum: number, item: { name: string; value: number; itemStyle: { color: string } }) => sum + item.value, 0);

		const windowWidth = window.innerWidth;
		const isMobile = windowWidth <= 768;
		const isSmallMobile = windowWidth <= 480;

		const titleFontSize = isSmallMobile ? 16 : isMobile ? 18 : 24;
		const labelFontSize = isSmallMobile ? 10 : isMobile ? 11 : 12;
		const legendFontSize = isSmallMobile ? 10 : 12;
		const legendItemSize = isSmallMobile ? 15 : 20;
		const legendBottom = isSmallMobile ? 5 : 10;
		const pieRadius = isMobile ? ["30%", "55%"] : ["35%", "65%"];
		const pieCenter = isMobile ? ["50%", "50%"] : ["50%", "55%"];

		return {
			title: {
				text: title,
				left: "center",
				top: 10,
				textStyle: {
					fontSize: titleFontSize,
					fontWeight: "bold",
					color: "#48484A"
				},
				padding: [10, 0, isSmallMobile ? 10 : 20, 0]
			},
			tooltip: {
				trigger: "item",
				formatter: "{b}: {c} ({d}%)"
			},
			legend: {
				orient: "horizontal",
				bottom: legendBottom,
				left: "center",
				itemWidth: legendItemSize,
				itemHeight: legendItemSize,
				textStyle: {
					fontSize: legendFontSize
				}
			},
			series: [
				{
					type: "pie",
					radius: pieRadius,
					center: pieCenter,
					avoidLabelOverlap: true,
					itemStyle: {
						borderRadius: 8,
						borderColor: "#fff",
						borderWidth: 2
					},
					label: {
						show: true,
						formatter: (params: any) => {
							const percentage = ((params.value / total) * 100).toFixed(0);
							if (showPercentage) {
								return `${params.name}\n${percentage}%`;
							}
							return `${params.name}`;
						},
						fontSize: labelFontSize,
						fontWeight: "bold",
						overflow: "break"
					},
					emphasis: {
						label: {
							show: true,
							fontSize: labelFontSize + 2,
							fontWeight: "bold"
						},
						itemStyle: {
							shadowBlur: 10,
							shadowOffsetX: 0,
							shadowColor: "rgba(0, 0, 0, 0.5)"
						}
					},
					data: data
				}
			]
		};
	}

	// Initialize main charts
	function initMainCharts() {
		const roleElement = document.getElementById("role-chart");
		const levelElement = document.getElementById("level-chart");

		if (roleElement && levelElement) {
			// Calculate available width based on window size
			const windowWidth = window.innerWidth;
			let chartWidth, chartHeight;

			if (windowWidth > 1000) {
				// Desktop: popup max-width is 1200px, with padding, 2 columns
				chartWidth = Math.min((window.innerWidth - 150) / 2, 480); // 480
				chartHeight = 540;
			} else if (windowWidth > 768) {
				// Tablet: single column
				chartWidth = Math.min(windowWidth - 100, 480);
				chartHeight = 400;
			} else {
				// Mobile: single column, smaller
				chartWidth = windowWidth - 80;
				chartHeight = 350;
			}

			// Set explicit dimensions
			roleElement.style.width = `${chartWidth}px`;
			roleElement.style.height = `${chartHeight}px`;
			levelElement.style.width = `${chartWidth}px`;
			levelElement.style.height = `${chartHeight}px`;

			// Role chart
			roleChart = echarts.init(roleElement, null, { width: chartWidth, height: chartHeight });
			const roleData = createPieData(chartData.attenderRole, colors);
			roleChart.setOption(createPieOption(chartData.attenderRoleTitle, roleData));

			// Level chart
			levelChart = echarts.init(levelElement, null, { width: chartWidth, height: chartHeight });
			const levelData = createPieData(chartData.programmingLevel, colors);
			levelChart.setOption(createPieOption(chartData.programmingLevelTitle, levelData));
		}
	}

	// Initialize social media charts
	function initializeSocialMediaCharts() {
		if (fbAgeChart && fbGenderChart && igAgeChart && igGenderChart) return;

		// Calculate available width for social media charts
		const windowWidth = window.innerWidth;
		let chartWidth, chartHeight;

		if (windowWidth > 1200) {
			// Desktop: 2 columns in social media section
			chartWidth = Math.min((1200 - 100) / 2, 400);
			chartHeight = 350;
		} else if (windowWidth > 768) {
			// Tablet: 2 columns but narrower
			chartWidth = Math.min((windowWidth - 100) / 2, 350);
			chartHeight = 350;
		} else {
			// Mobile: single column
			chartWidth = windowWidth - 60;
			chartHeight = 300;
		}

		setTimeout(() => {
			const fbAgeElement = document.getElementById("fb-age-chart");
			const fbGenderElement = document.getElementById("fb-gender-chart");
			const igAgeElement = document.getElementById("ig-age-chart");
			const igGenderElement = document.getElementById("ig-gender-chart");

			if (fbAgeElement && !fbAgeChart) {
				fbAgeElement.style.width = `${chartWidth}px`;
				fbAgeElement.style.height = `${chartHeight}px`;
				fbAgeChart = echarts.init(fbAgeElement, null, { width: chartWidth, height: chartHeight });
				const fbAgeData = createPieData(chartData.fbAge, socialMediaColors);
				fbAgeChart.setOption(createPieOption(chartData.fbAgeTitle, fbAgeData, false));
			}

			if (fbGenderElement && !fbGenderChart) {
				fbGenderElement.style.width = `${chartWidth}px`;
				fbGenderElement.style.height = `${chartHeight}px`;
				fbGenderChart = echarts.init(fbGenderElement, null, { width: chartWidth, height: chartHeight });
				const fbGenderData = createPieData(chartData.fbGender, ["#4FC3F7", "#FFB74D"]);
				fbGenderChart.setOption(createPieOption(chartData.fbGenderTitle, fbGenderData));
			}

			if (igAgeElement && !igAgeChart) {
				igAgeElement.style.width = `${chartWidth}px`;
				igAgeElement.style.height = `${chartHeight}px`;
				igAgeChart = echarts.init(igAgeElement, null, { width: chartWidth, height: chartHeight });
				const igAgeData = createPieData(chartData.igAge, socialMediaColors);
				igAgeChart.setOption(createPieOption(chartData.igAgeTitle, igAgeData, false));
			}

			if (igGenderElement && !igGenderChart) {
				igGenderElement.style.width = `${chartWidth}px`;
				igGenderElement.style.height = `${chartHeight}px`;
				igGenderChart = echarts.init(igGenderElement, null, { width: chartWidth, height: chartHeight });
				const igGenderData = createPieData(chartData.igGender, ["#4FC3F7", "#FFB74D"]);
				igGenderChart.setOption(createPieOption(chartData.igGenderTitle, igGenderData));
			}
		}, 100);
	}

	// Initialize main charts on load
	initMainCharts();

	// Listen for popup open events
	document.addEventListener("popupOpened", (event: Event) => {
		const customEvent = event as CustomEvent;
		if (customEvent.detail && customEvent.detail.id === "stat-popup") {
			setTimeout(initializeSocialMediaCharts, 200);
		}
	});

	// Handle window resize
	let resizeTimeout: ReturnType<typeof setTimeout> | undefined;
	window.addEventListener("resize", () => {
		clearTimeout(resizeTimeout);
		resizeTimeout = setTimeout(() => {
			[roleChart, levelChart, fbAgeChart, fbGenderChart, igAgeChart, igGenderChart].forEach(chart => {
				if (chart) {
					chart.resize();
				}
			});
		}, 200);
	});

	// Also handle print event - reinitialize charts for proper sizing
	window.addEventListener("beforeprint", () => {
		// Reinitialize to ensure proper sizing for print
		setTimeout(() => {
			[roleChart, levelChart, fbAgeChart, fbGenderChart, igAgeChart, igGenderChart].forEach(chart => {
				if (chart) {
					chart.resize();
				}
			});
		}, 0);
	});

	// Initialize social media charts when popup is already open
	initializeSocialMediaCharts();
</script>
<style>
	#about {
		padding: 8rem 2rem 4rem;
	}

	.rewind {
		margin-bottom: 2rem;
		font-weight: 700;
		text-align: center;
		font-size: 2.5rem;
	}

	#schools-text {
		max-width: 40rem;
		width: 100%;
		margin: auto;
		display: block;
	}
	#schools-text-container {
		margin-top: 5rem;
	}

	.container {
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem;
	}

	.chart-area {
		margin: 2rem 0;
		display: flex;
		justify-content: center;
		align-items: start;
		flex-wrap: wrap;
		width: 100%;
		gap: 2rem;
	}

	.chart-container {
		width: auto;
		min-height: 350px;
		padding: 1rem 0; /* Add vertical padding for breathing room */
	}
	#level-info {
		margin-top: 1rem;
		padding: 1rem 2rem;
		font-weight: 700;
		line-height: 125%;
	}
	.stats-cards {
		gap: 1rem;
	}

	.stats-cards,
	.charts-container {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		color: var(--white);
	}

	.stat-card {
		position: relative;
		flex: 1;
		max-width: 15rem;
		display: flex;
		justify-content: end;
		flex-direction: column;
		border-radius: 1.75rem;
		padding: 15rem 1rem 3rem;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
	}

	.stat-card::before {
		content: "";
		position: absolute;
		inset: 0;
		border-radius: 1.75rem;
		background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, #000 100%);
		opacity: 0;
		transition: opacity 0.3s;
	}
	.stat-card:has(.appeared)::before {
		opacity: 1;
	}

	.card-content {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 1rem;
		animation-delay: 0.3s;
	}

	.stat-number {
		font-size: 3rem;
		text-align: center;
		font-family: "firacode", monospace;
		font-weight: 500;
	}

	.stat-label {
		white-space: nowrap;
		text-align: center;
		line-height: 1.3;
	}

	.review-title {
		font-size: 1.625rem;
		margin-block: 6rem 2.5rem;
		text-align: center;
	}

	.review-number {
		color: #708dfa;
		font-size: 1.5em;
	}

	canvas {
		page-break-inside: avoid;
	}

	.space .stat-label {
		max-width: 5rem;
		margin: 0 auto;
		white-space: normal;
	}

	.space {
		margin-bottom: -1rem;
	}

	@media screen and (max-width: 70rem) {
		.space {
			margin-bottom: 0rem;
		}

		.space .stat-label {
			max-width: unset;
		}

		.stat-card {
			flex: 1 1 calc(50% - 2rem);
			padding: 5rem 1rem 2rem;
			max-width: 23rem;
		}

		.stat-card::before {
			background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000 100%);
		}

		h2 span {
			display: block;
		}

		#about {
			padding-top: 4rem;
		}
		.review-item {
			font-size: 2rem;
		}

		.container {
			padding: 1.5rem;
		}
	}
	@media screen and (max-width: 40rem) {
		.stat-number {
			font-size: 2.5rem;
		}

		.container {
			padding: 1rem;
		}
	}

	@media screen and (max-width: 33rem) {
		.stat-card {
			flex: 1 1 100%;
			max-width: 100%;
		}
	}

	.social-media-section {
		margin-top: 3rem;
		padding: 2rem;
		border-top: 1px solid #e0e0e0;
	}

	.social-media-section .container {
		max-width: 100%;
		padding: 0 1rem;
	}

	h3 {
		text-align: center;
		font-size: 1.8rem;
		margin-bottom: 2rem;
		color: #48484a;
		font-weight: bold;
	}

	.social-platforms {
		display: flex;
		gap: 2rem;
		flex-wrap: wrap;
	}

	.platform-section {
		width: 100%;
	}

	.platform-section h4 {
		text-align: center;
		font-size: 1.4rem;
		margin-bottom: 1.5rem;
		color: #48484a;
		font-weight: bold;
	}

	.platform-stats {
		width: 100%;
	}

	.stats-info {
		margin-bottom: 2rem;
		text-align: center;
	}

	.stats-info p {
		margin: 0.5rem 0;
		font-size: 1rem;
		color: #666;
		font-weight: 500;
	}

	.charts-container .chart-container {
		width: auto;
		height: auto;
		min-height: 300px;
		margin: 0 auto;
		padding: 1rem 0; /* Add vertical padding */
	}

	.stats-cards-wrapper {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 1rem;
		width: 100%;
		margin-bottom: 1.5rem;
	}

	.stats-card-item {
		border-radius: 0.5rem;
		padding: 1rem 0.5rem;
		background-color: #f8f9fa;
		text-align: center;
		width: 100%;
		border: 2px solid #e9ecef;
	}

	.stats-card-item p {
		font-size: 1.1rem;
		color: #333;
		font-weight: 500;
	}

	.stats-card-item p.stats-value {
		font-weight: 600;
		font-size: 1.3rem;
		margin-top: 0.5rem;
	}

	@media (max-width: 600px) {
		.stats-cards-wrapper {
			grid-template-columns: 1fr;
		}
	}

	@media print {
		#about {
			padding: 0;
			margin-top: 24pt;
		}

		h2 span {
			display: inline;
		}
	}
</style>
