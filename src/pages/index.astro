---
import Nav from "@components/section/Nav.astro";
import Hero from "@components/section/Hero.astro";
import Intro from "@components/section/Intro.astro";
import About from "@components/section/About.astro";
import News from "@components/section/News.astro";
import Sponsors from "@components/section/Sponsors.astro";
import Cycle from "@components/section/Cycle.astro";
import Time from "@components/section/Time.astro";
import Items from "@components/section/Items.astro";
import Plans from "@components/section/Plans.astro";
import Addons from "@components/section/Addons.astro";
import Form from "@components/section/Form.astro";
import FAQ from "@components/section/FAQ.astro";
import Footer from "@components/section/Footer.astro";
import ogImage from "@assets/img/og.webp";
import ItemsPopup from "@components/section/ItemsPopup.astro";
const { lang = "zh-Hant" } = Astro.props;
const t = await import(`../i18n/${lang}.json`).then(m => m.default);
const sections = [Nav, Hero, Intro, About, News, Sponsors, Cycle, Time, Items, Plans, Addons, ItemsPopup, Form, FAQ, Footer];
const { title = t.meta.title, description = t.meta.description } = Astro.props;

// Default schema for homepage (Organization + WebSite)
const defaultSchema = {
	"@context": "https://schema.org",
	"@graph": [
		{
			"@type": "Organization",
			name: "SITCON 學生計算機年會",
			alternateName: "SITCON",
			url: "https://sitcon.org",
			logo: "https://sitcon.org/2026/cfs/SITCON.svg",
			description: description,
			sameAs: ["https://www.facebook.com/SITCONtw", "https://twitter.com/sitcontw"]
		},
		{
			"@type": "WebSite",
			name: title,
			url: "https://sitcon.org/2026/cfs/",
			description: description,
			inLanguage: lang
		}
	]
};
---

<html lang={lang}>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta property="og:title" content={title} />
		<meta property="og:type" content="website" />
		<meta property="og:image" content={ogImage.src} />
		<meta property="og:description" content={description} />
		<meta property="og:site_name" content="SITCON 學生計算機年會" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:image" content={ogImage.src} />
		<meta name="twitter:card" content="summary_large_image" />
		<slot name="schema">
			<script type="application/ld+json" set:html={JSON.stringify(defaultSchema)} is:inline />
		</slot>
		<link rel="icon" type="image/png" href="/2026/cfs/favicon/favicon-96x96.png" sizes="96x96" />
		<link rel="icon" type="image/svg+xml" href="/2026/cfs/SITCON.svg" />
		<link rel="shortcut icon" href="/2026/cfs/favicon/favicon.ico" />
		<link rel="apple-touch-icon" sizes="180x180" href="/2026/cfs/favicon/apple-touch-icon.png" />
		<meta name="apple-mobile-web-app-title" content="SITCON" />
		<link rel="manifest" href="/2026/cfs/favicon/site.webmanifest" />
		<meta name="theme-color" content="#77B55A" />
		<script is:inline>
			(function (w, d, s, l, i) {
				w[l] = w[l] || [];
				w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
				var f = d.getElementsByTagName(s)[0],
					j = d.createElement(s),
					dl = l != "dataLayer" ? "&l=" + l : "";
				j.async = true;
				j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
				f.parentNode.insertBefore(j, f);
			})(window, document, "script", "dataLayer", "GTM-NPVBCDZ");
		</script>
	</head>
	<body>
		{
			sections.map(Component => {
				// 簡單來說就是複製貼上所有 HTML 上來，只是用 for 迴圈寫比較簡潔。
				const key = Component.name.toLowerCase();
				return <Component t={{ ...t[key], ...t.global }} lang={lang} />;
			})
		}
		<script>
			import Lenis from "lenis";

			declare global {
				interface Window {
					popupCtrl: (id?: string, action?: "open" | "close", updateUrl?: boolean, find?: Element | null) => void;
				}
			}

			const lenis = new Lenis({
				autoRaf: true
			});

			const observer = new IntersectionObserver(
				entries => {
					entries.forEach(entry => {
						const el = entry.target;
						if (entry.isIntersecting) {
							// 元素進入 viewport
							el.classList.add("appeared");
							el.classList.remove("over");
						} else {
							// 元素離開 viewport 上方
							const rect = el.getBoundingClientRect();
							const isOver = rect.bottom < 0;
							el.classList.toggle("over", isOver);
							el.classList.toggle("appeared", false);
						}
					});
				},
				{
					threshold: 0.1
				}
			);

			document.querySelectorAll(".aos").forEach(el => observer.observe(el));

			window.popupCtrl = (id = "", action = "open", updateUrl = true, find) => {
				const popupBg = find || (document.querySelector(`#${id} + .popup-bg`) as HTMLElement | null);
				if (!popupBg || !(popupBg instanceof HTMLElement)) return;
				if (action === "open") {
					popupBg.style.display = "flex";
					setTimeout(() => {
						popupBg.scrollTo({
							top: 0
						});
						popupBg.classList.add("show");
						// Dispatch custom event for chart initialization
						document.dispatchEvent(new CustomEvent("popupOpened", { detail: { id } }));
					}, 0);

					// Update URL based on popup type
					if (updateUrl) {
						if (id.startsWith("item-popup-")) {
							// Extract item ID and use SPA-style path
							const itemId = id.replace("item-popup-", "");
							const currentPath = window.location.pathname;
							// Remove any existing /item/{id} from the path first
							const basePath = currentPath.replace(/\/item\/[^\/]+$/, "");
							const newPath = basePath.endsWith("/") ? `${basePath}item/${itemId}` : `${basePath}/item/${itemId}`;
							history.pushState({ popupId: id, type: "item" }, "", newPath);
						} else {
							// Use anchor for other popups
							history.pushState({ popupId: id, type: "anchor" }, "", `#${id}`);
						}
					}
				} else {
					popupBg.classList.remove("show");
					setTimeout(() => {
						popupBg.style.display = "none";
					}, 300);

					// Remove URL hash/path when closing
					if (updateUrl) {
						const currentState = history.state;
						if (currentState && currentState.popupId === id) {
							if (currentState.type === "item") {
								// Remove /item/{id} from path
								const currentPath = window.location.pathname;
								const basePath = currentPath.replace(/\/item\/[^\/]+$/, "");
								history.pushState(null, "", basePath || window.location.pathname.split("/item/")[0]);
							} else {
								// Remove hash
								history.pushState(null, "", window.location.pathname);
							}
						}
					}
				}
			};

			// Handle browser back/forward buttons
			window.addEventListener("popstate", event => {
				// Close all open popups
				document.querySelectorAll(".popup-bg.show").forEach(popupBg => {
					const popup = popupBg.previousElementSibling;
					if (popup) {
						const popupId = popup.id;
						window.popupCtrl(popupId, "close", false);
					}
				});

				// Open popup if state contains popup info
				if (event.state && event.state.popupId) {
					// Scroll to Items section if it's an item popup
					if (event.state.type === "item") {
						const itemsSection = document.getElementById("items");
						if (itemsSection) {
							itemsSection.scrollIntoView({ behavior: "instant" });
						}
					}
					window.popupCtrl(event.state.popupId, "open", false);
				} else if (window.location.hash) {
					const popupId = window.location.hash.substring(1);
					const popupElement = document.getElementById(popupId);
					if (popupElement) {
						window.popupCtrl(popupId, "open", false);
					}
				} else if (window.location.pathname.includes("/item/")) {
					const match = window.location.pathname.match(/\/item\/([^\/]+)/);
					if (match) {
						const itemId = match[1];
						const popupId = `item-popup-${itemId}`;
						const popupElement = document.getElementById(popupId);
						if (popupElement) {
							const itemsSection = document.getElementById("items");
							if (itemsSection) {
								itemsSection.scrollIntoView({ behavior: "instant" });
							}
							window.popupCtrl(popupId, "open", false);
						}
					}
				}
			});

			window.addEventListener("DOMContentLoaded", () => {
				if (window.location.hash) {
					const popupId = window.location.hash.substring(1);
					const popupElement = document.getElementById(popupId);
					if (popupElement) {
						setTimeout(() => window.popupCtrl(popupId, "open", false), 100);
					}
				} else if (window.location.pathname.includes("/item/")) {
					const match = window.location.pathname.match(/\/item\/([^\/]+)/);
					if (match) {
						const itemId = match[1];
						const popupId = `item-popup-${itemId}`;
						const popupElement = document.getElementById(popupId);
						if (popupElement) {
							// Scroll to Items section first, then open popup
							const itemsSection = document.getElementById("items");
							if (itemsSection) {
								itemsSection.scrollIntoView({ behavior: "instant" });
							}
							setTimeout(() => window.popupCtrl(popupId, "open", false), 100);
						}
					}
				}
			});

			document.addEventListener("keydown", event => {
				if (event.key === "Escape" || event.key === "Esc") {
					const openPopups = document.querySelector(".popup-bg.show");
					openPopups && window.popupCtrl("", "close", true, openPopups);
				}
			});
		</script>
		<style is:global>
			/* is: global 代表是全域的 */
			/* 如果你直接寫 <style> 在 components 的話不用擔心，你的 CSS 只會作用在裡面 */
			@import url("https://font.emtech.cc/css/LINESeedTW/400");
			@import url("https://font.emtech.cc/css/LINESeedTW/700");
			@import url("https://font.emtech.cc/css/FiraCode/500");
			@import url("https://font.emtech.cc/css/FiraCode/700");
			@import url("https://font.emtech.cc/css/XiaoLai/400");

			:root {
				--black: #1d1d1f;
				--white: #ffffff;
				--gray: #6e6e73;
				--container: #f5f5f7;
				--gray-container: #e8e8ec;
				--items-bg: #f1f3fb;
				--items-remaining-tag: #ffe9a8;
				--items-deadline-tag: #c1ffb1;
				--items-green: #00d959;
				--items-progress: var(--items-green);
				--items-progress-bg: #e2e2e2;
				--border-light: #d2d2d7;
				--button-dark: #303030;
			}

			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			html {
				scroll-behavior: smooth;
				scroll-padding-top: 2rem;
			}

			body {
				color: var(--black);
				font-family:
					"LINESeedTW",
					-apple-system,
					BlinkMacSystemFont,
					"Segoe UI",
					Roboto,
					"Helvetica Neue",
					Arial,
					sans-serif;
			}

			body:has(.show) {
				overflow: hidden;
			}

			.aos-fadeIn {
				opacity: 0;
				transition: opacity 1.2s ease-out;
			}

			.aos-fadeIn.appeared {
				opacity: 1;
			}

			.aos-fadeInBottom {
				opacity: 0;
				transform: translateY(2rem);
				transition:
					opacity 1.2s ease-out,
					transform 1.2s ease-out;
			}

			.aos-fadeInBottom.appeared {
				opacity: 1;
				transform: translateY(0);
			}

			section {
				position: relative;
			}

			.description {
				font-size: 0.75rem;
				color: #97979b;
				line-height: 1.4;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
				margin-bottom: 1rem;
			}

			button,
			textarea,
			input {
				font-family: inherit;
				font-size: inherit;
				color: inherit;
			}

			h2 {
				font-size: 3rem;
				margin-bottom: 2rem;
				text-align: center;
			}

			h2,
			h3 {
				text-wrap: balance;
				word-break: break-word;
			}

			@media screen and (max-width: 45rem) {
				h2 {
					font-size: 2.5rem;
					margin-bottom: 1.5rem;
				}
			}

			@media screen and (max-width: 36rem) {
				h2 {
					font-size: 2rem;
				}
			}

			@page {
				size: A4;
				margin: 1cm;
			}

			@media print {
				body {
					font-size: 10pt;
				}
				.aos-fadeIn {
					opacity: 1;
				}

				.aos-fadeInBottom {
					opacity: 1;
					transform: translateY(0);
				}

				body {
					scroll-behavior: auto;
					scroll-padding-top: 0;
				}

				body {
					-webkit-print-color-adjust: exact; /* ✅ Chrome / Edge */
					color-adjust: exact; /* ✅ 標準屬性 */
					print-color-adjust: exact; /* ✅ 新版標準草案 */
				}

				h2 {
					font-size: 24pt;
					margin-bottom: 1rem;
				}

				.no-cut {
					page-break-inside: avoid;
					break-inside: avoid;
				}
			}
		</style>
		<!-- Google Tag Manager (noscript) -->
		<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NPVBCDZ" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
		<!-- End Google Tag Manager (noscript) -->
	</body>
</html>
